<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Payment Analyzer Professional v6.0 - State Management Edition - Talysson A17</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <!-- LZ-String for compression -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lz-string/1.5.0/lz-string.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&display=swap');
        
        :root {
            --primary: #0f172a;
            --primary-light: #1e293b;
            --accent: #3b82f6;
            --accent-dark: #2563eb;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #dc2626;
            --slate-50: #f8fafc;
            --slate-100: #f1f5f9;
            --slate-200: #e2e8f0;
            --slate-300: #cbd5e1;
            --slate-400: #94a3b8;
            --slate-500: #64748b;
            --slate-600: #475569;
            --slate-700: #334155;
            --slate-800: #1e293b;
            --slate-900: #0f172a;
            --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            --font-mono: 'SF Mono', 'Monaco', 'Cascadia Code', monospace;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: var(--font-primary);
            line-height: 1.6;
            color: var(--primary);
            background: linear-gradient(180deg, #f0f4f8 0%, #d9e2ec 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .watermark {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(-45deg);
            font-size: 120px;
            font-weight: 900;
            color: rgba(0, 0, 0, 0.03);
            z-index: 0;
            pointer-events: none;
            text-transform: uppercase;
        }

        /* Recovery notification banner */
        .recovery-banner {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(135deg, var(--success) 0%, #059669 100%);
            color: white;
            padding: 12px 24px;
            border-radius: 50px;
            box-shadow: 0 10px 30px rgba(16, 185, 129, 0.3);
            display: none;
            align-items: center;
            gap: 12px;
            z-index: 1000;
            animation: slideDown 0.5s ease-out;
        }

        .recovery-banner.show {
            display: flex;
        }

        @keyframes slideDown {
            from {
                transform: translate(-50%, -100%);
                opacity: 0;
            }
            to {
                transform: translate(-50%, 0);
                opacity: 1;
            }
        }

        .recovery-banner-text {
            font-size: 14px;
            font-weight: 600;
        }

        .recovery-banner-action {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.2s;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .recovery-banner-action:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.05);
        }

        .recovery-banner-close {
            background: transparent;
            border: none;
            color: white;
            font-size: 20px;
            cursor: pointer;
            padding: 0;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: background 0.2s;
        }

        .recovery-banner-close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .document {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            border-radius: 16px;
            overflow: hidden;
            position: relative;
            z-index: 1;
        }

        .company-header {
            background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
            padding: 35px 45px;
            border-bottom: 2px solid var(--slate-200);
        }

        .company-branding {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        .company-logo {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .logo-mark {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 900;
            font-size: 24px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

        .company-details h1 {
            font-size: 20px;
            font-weight: 800;
            color: var(--primary);
            margin-bottom: 4px;
        }

        .company-details p {
            font-size: 14px;
            color: var(--slate-600);
            margin: 2px 0;
        }

        .document-meta {
            text-align: right;
            display: flex;
            gap: 12px;
            align-items: center;
            justify-content: flex-end;
        }

        .meta-badge {
            display: inline-block;
            background: var(--accent);
            color: white;
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .meta-badge.validated {
            background: var(--success);
        }

        .meta-badge.invalid {
            background: var(--danger);
        }

        .upload-section {
            padding: 45px;
            background: linear-gradient(180deg, var(--slate-50) 0%, white 100%);
            border-bottom: 2px solid var(--slate-200);
        }

        .upload-area {
            background: white;
            border: 3px dashed var(--slate-300);
            border-radius: 16px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .upload-area::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, var(--accent) 0%, var(--accent-dark) 100%);
            opacity: 0;
            transition: opacity 0.3s;
        }

        .upload-area:hover {
            border-color: var(--accent);
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(59, 130, 246, 0.2);
        }

        .upload-area:hover::before {
            opacity: 0.05;
        }

        .upload-content {
            position: relative;
            z-index: 1;
        }

        .upload-icon {
            font-size: 48px;
            margin-bottom: 20px;
        }

        .upload-title {
            font-size: 20px;
            font-weight: 700;
            color: var(--primary);
            margin-bottom: 8px;
        }

        .upload-subtitle {
            font-size: 14px;
            color: var(--slate-500);
        }

        .file-input {
            display: none;
        }

        .file-list {
            margin-top: 24px;
            display: grid;
            gap: 12px;
        }

        .file-item {
            background: white;
            border: 1px solid var(--slate-200);
            border-radius: 12px;
            padding: 16px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            transition: all 0.2s;
        }

        .file-item:hover {
            border-color: var(--accent);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .file-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--slate-100) 0%, var(--slate-200) 100%);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
        }

        .file-details {
            text-align: left;
        }

        .file-name {
            font-weight: 600;
            color: var(--primary);
            font-size: 14px;
        }

        .file-meta {
            font-size: 12px;
            color: var(--slate-500);
        }

        .remove-btn {
            background: linear-gradient(135deg, var(--danger) 0%, #b91c1c 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 8px 16px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }

        .remove-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
        }

        .analyze-btn {
            background: linear-gradient(135deg, var(--accent) 0%, var(--accent-dark) 100%);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 18px 36px;
            font-size: 16px;
            font-weight: 700;
            margin-top: 24px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }

        .analyze-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(59, 130, 246, 0.4);
        }

        .analyze-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .loading-card {
            background: white;
            border-radius: 16px;
            padding: 40px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            text-align: center;
            min-width: 320px;
        }

        .spinner {
            width: 60px;
            height: 60px;
            border: 4px solid var(--slate-200);
            border-top-color: var(--accent);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 24px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .loading-text {
            font-size: 16px;
            font-weight: 600;
            color: var(--primary);
            margin-bottom: 12px;
        }

        .loading-progress {
            background: var(--slate-200);
            height: 6px;
            border-radius: 3px;
            overflow: hidden;
            margin-top: 16px;
        }

        .loading-progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--accent) 0%, var(--accent-dark) 100%);
            transition: width 0.3s;
        }

        .results-section {
            display: none;
        }

        .report-header {
            background: linear-gradient(135deg, #1e3a8a 0%, #3730a3 50%, #6d28d9 100%);
            color: white;
            padding: 50px 45px;
            position: relative;
            overflow: hidden;
        }

        .report-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        }

        .report-title {
            font-size: 36px;
            font-weight: 900;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .report-subtitle {
            font-size: 18px;
            opacity: 0.95;
            margin-bottom: 35px;
        }

        .report-metadata {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 25px;
            background: rgba(255, 255, 255, 0.15);
            padding: 25px;
            border-radius: 12px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .metadata-item {
            display: flex;
            flex-direction: column;
        }

        .metadata-label {
            font-size: 11px;
            text-transform: uppercase;
            letter-spacing: 0.8px;
            opacity: 0.85;
            margin-bottom: 6px;
            font-weight: 600;
        }

        .metadata-value {
            font-size: 17px;
            font-weight: 700;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
        }

        .kpi-section {
            padding: 45px;
            background: linear-gradient(180deg, var(--slate-50) 0%, white 100%);
        }

        .section-header {
            display: flex;
            align-items: center;
            margin-bottom: 35px;
            position: relative;
        }

        .section-header::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 100px;
            height: 4px;
            background: linear-gradient(90deg, var(--accent) 0%, transparent 100%);
            border-radius: 2px;
        }

        .section-number {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--accent) 0%, var(--accent-dark) 100%);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 800;
            margin-right: 18px;
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }

        .section-title {
            font-size: 26px;
            font-weight: 800;
            color: var(--primary);
        }

        .kpi-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
            gap: 24px;
            margin-bottom: 35px;
        }

        .kpi-card {
            background: white;
            padding: 28px;
            border-radius: 16px;
            border: 1px solid var(--slate-200);
            position: relative;
            overflow: hidden;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .kpi-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.12);
            border-color: var(--accent);
        }

        .kpi-card.primary {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
            color: white;
            border: none;
        }

        .kpi-card.success {
            background: linear-gradient(135deg, var(--success) 0%, #059669 100%);
            color: white;
            border: none;
        }

        .kpi-card.danger {
            background: linear-gradient(135deg, var(--danger) 0%, #b91c1c 100%);
            color: white;
            border: none;
        }

        .kpi-label {
            font-size: 12px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.8px;
            color: var(--slate-500);
            margin-bottom: 12px;
        }

        .kpi-card.primary .kpi-label,
        .kpi-card.success .kpi-label,
        .kpi-card.danger .kpi-label {
            color: rgba(255, 255, 255, 0.85);
        }

        .kpi-value {
            font-size: 34px;
            font-weight: 900;
            margin-bottom: 10px;
            line-height: 1;
        }

        .kpi-change {
            font-size: 14px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .table-section {
            padding: 45px;
            background: white;
        }

        .table-wrapper {
            overflow-x: auto;
            border: 1px solid var(--slate-200);
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.04);
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        thead {
            background: linear-gradient(180deg, var(--slate-50) 0%, var(--slate-100) 100%);
        }

        thead th {
            padding: 18px 20px;
            text-align: left;
            font-weight: 700;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.8px;
            color: var(--slate-700);
            border-bottom: 2px solid var(--slate-200);
        }

        thead th.text-right {
            text-align: right;
        }

        tbody tr {
            border-bottom: 1px solid var(--slate-100);
            transition: all 0.2s;
        }

        tbody tr:hover {
            background: linear-gradient(90deg, transparent 0%, var(--slate-50) 50%, transparent 100%);
        }

        tbody td {
            padding: 18px 20px;
            font-size: 14px;
            color: var(--slate-700);
        }

        .cell-date {
            font-weight: 700;
            font-family: var(--font-mono);
            color: var(--primary);
            font-size: 13px;
        }

        .cell-day {
            color: var(--slate-600);
            font-weight: 500;
        }

        .cell-number {
            text-align: center;
            font-weight: 700;
            font-size: 15px;
            color: var(--primary);
        }

        .cell-currency {
            text-align: right;
            font-family: var(--font-mono);
            font-weight: 700;
            color: var(--primary);
            font-size: 14px;
        }

        .badge {
            display: inline-block;
            padding: 5px 14px;
            font-size: 11px;
            font-weight: 700;
            border-radius: 20px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .badge-success {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(16, 185, 129, 0.2) 100%);
            color: var(--success);
            border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .badge-danger {
            background: linear-gradient(135deg, rgba(220, 38, 38, 0.1) 0%, rgba(220, 38, 38, 0.2) 100%);
            color: var(--danger);
            border: 1px solid rgba(220, 38, 38, 0.3);
        }

        .badge-warning {
            background: linear-gradient(135deg, rgba(245, 158, 11, 0.1) 0%, rgba(245, 158, 11, 0.2) 100%);
            color: var(--warning);
            border: 1px solid rgba(245, 158, 11, 0.3);
        }

        tfoot {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
            color: white;
        }

        tfoot td {
            padding: 22px 20px;
            font-weight: 800;
            font-size: 15px;
        }

        tfoot .cell-currency {
            color: white;
            font-size: 18px;
        }

        .settlement-section {
            padding: 45px;
            background: linear-gradient(180deg, var(--slate-50) 0%, white 100%);
        }

        .settlement-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 35px;
        }

        .breakdown-details {
            background: white;
            padding: 35px;
            border-radius: 16px;
            border: 1px solid var(--slate-200);
        }

        .breakdown-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 14px 0;
            border-bottom: 1px solid var(--slate-200);
        }

        .breakdown-row:last-child {
            border-bottom: none;
        }

        .breakdown-label {
            font-size: 14px;
            color: var(--slate-600);
            font-weight: 500;
        }

        .breakdown-value {
            font-size: 15px;
            font-weight: 700;
            font-family: var(--font-mono);
            color: var(--primary);
        }

        .breakdown-row.total {
            border-top: 3px solid var(--primary);
            margin-top: 20px;
            padding-top: 20px;
        }

        .breakdown-row.total .breakdown-label {
            font-weight: 800;
            color: var(--primary);
            font-size: 16px;
        }

        .breakdown-row.total .breakdown-value {
            font-size: 24px;
            font-weight: 900;
            color: var(--accent);
        }

        .payment-status {
            background: linear-gradient(135deg, var(--danger) 0%, #b91c1c 100%);
            color: white;
            padding: 35px;
            border-radius: 16px;
            text-align: center;
            box-shadow: 0 20px 40px rgba(220, 38, 38, 0.3);
        }

        .payment-status.positive {
            background: linear-gradient(135deg, var(--success) 0%, #059669 100%);
            box-shadow: 0 20px 40px rgba(16, 185, 129, 0.3);
        }

        .status-icon {
            font-size: 56px;
            margin-bottom: 20px;
        }

        .status-label {
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 1px;
            opacity: 0.95;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .status-value {
            font-size: 28px;
            font-weight: 900;
            margin-bottom: 20px;
        }

        .validation-alert {
            background: linear-gradient(135deg, var(--warning) 0%, #f59e0b 100%);
            color: white;
            padding: 20px;
            border-radius: 12px;
            margin: 20px 0;
            font-weight: 600;
            display: none;
        }

        .validation-alert.show {
            display: block;
        }

        .validation-alert.error {
            background: linear-gradient(135deg, var(--danger) 0%, #b91c1c 100%);
        }

        .validation-alert.success {
            background: linear-gradient(135deg, var(--success) 0%, #059669 100%);
        }

        .validation-icon {
            font-size: 24px;
            margin-right: 10px;
        }

        .print-btn {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 14px 28px;
            font-size: 15px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 4px 12px rgba(15, 23, 42, 0.3);
            display: inline-flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            position: relative;
            overflow: hidden;
        }

        .print-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .print-btn:hover::before {
            left: 100%;
        }

        .print-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(15, 23, 42, 0.4);
        }

        .print-btn:active {
            transform: translateY(0);
            box-shadow: 0 2px 8px rgba(15, 23, 42, 0.3);
        }

        .print-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        .print-btn-icon {
            font-size: 20px;
        }

        .report-actions {
            padding: 0 45px;
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 15px;
            margin-top: -10px;
        }

        .print-helper-text {
            font-size: 12px;
            color: var(--slate-600);
            display: none;
        }

        @media (max-width: 768px) {
            body {
                padding: 10px;
            }

            .company-header,
            .upload-section,
            .kpi-section,
            .table-section,
            .settlement-section {
                padding: 25px 20px;
            }

            .report-header {
                padding: 30px 20px;
            }

            .report-title {
                font-size: 24px;
            }

            .kpi-grid {
                grid-template-columns: 1fr;
            }

            .settlement-grid {
                grid-template-columns: 1fr;
            }

            .table-wrapper {
                font-size: 12px;
            }

            thead th,
            tbody td {
                padding: 12px 10px;
            }

            .company-branding {
                flex-direction: column;
                align-items: flex-start;
            }

            .document-meta {
                width: 100%;
                justify-content: flex-start;
                margin-top: 15px;
            }

            .settings-btn {
                font-size: 11px;
                padding: 5px 12px;
            }

            .modal {
                width: 95%;
                margin: 10px;
            }

            .settings-row {
                grid-template-columns: 1fr;
            }

            .modal-body {
                padding: 20px;
            }

            .modal-footer {
                padding: 15px 20px;
            }

            .report-actions {
                padding: 0 20px;
                flex-direction: column;
                justify-content: center;
                margin-bottom: 20px;
            }

            .print-btn {
                width: 100%;
                justify-content: center;
                padding: 16px;
                font-size: 16px;
                animation: pulse 2s ease-in-out 3;
            }

            .print-helper-text {
                display: block;
                text-align: center;
                margin-top: 8px;
                font-style: italic;
            }

            .recovery-banner {
                width: calc(100% - 20px);
                left: 10px;
                transform: none;
                border-radius: 12px;
            }
        }

        .settings-btn {
            background: var(--slate-600);
            color: white;
            border: none;
            border-radius: 20px;
            padding: 6px 16px;
            font-size: 12px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            cursor: pointer;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .settings-btn:hover {
            background: var(--slate-700);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        }

        .settings-btn span {
            font-size: 14px;
        }

        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 2000;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease;
        }

        .modal-overlay.show {
            display: flex;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from { 
                opacity: 0;
                transform: translateY(-20px);
            }
            to { 
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal {
            background: white;
            border-radius: 16px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            animation: slideIn 0.3s ease;
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
            color: white;
            padding: 24px 30px;
            border-radius: 16px 16px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 20px;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .modal-close {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 18px;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-close:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: rotate(90deg);
        }

        .modal-body {
            padding: 30px;
        }

        .settings-section {
            margin-bottom: 30px;
        }

        .settings-section:last-child {
            margin-bottom: 0;
        }

        .settings-section-title {
            font-size: 14px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.8px;
            color: var(--slate-600);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--slate-200);
        }

        .settings-group {
            display: grid;
            gap: 20px;
        }

        .settings-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .setting-field {
            display: flex;
            flex-direction: column;
        }

        .setting-label {
            font-size: 13px;
            font-weight: 600;
            color: var(--slate-700);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .setting-input {
            padding: 10px 14px;
            border: 2px solid var(--slate-200);
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            font-family: var(--font-mono);
            transition: all 0.2s;
            background: white;
        }

        .setting-input:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .setting-input:hover {
            border-color: var(--slate-300);
        }

        .setting-description {
            font-size: 11px;
            color: var(--slate-500);
            margin-top: 6px;
            line-height: 1.4;
        }

        .modal-footer {
            padding: 20px 30px;
            background: var(--slate-50);
            border-top: 1px solid var(--slate-200);
            border-radius: 0 0 16px 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-info {
            font-size: 12px;
            color: var(--slate-600);
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .modal-actions {
            display: flex;
            gap: 12px;
        }

        .btn-secondary {
            background: var(--slate-200);
            color: var(--slate-700);
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-secondary:hover {
            background: var(--slate-300);
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--accent) 0%, var(--accent-dark) 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 24px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
        }

        .rules-info {
            background: linear-gradient(135deg, var(--slate-50) 0%, var(--slate-100) 100%);
            border: 1px solid var(--slate-200);
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 24px;
        }

        .rules-info-title {
            font-size: 13px;
            font-weight: 700;
            color: var(--slate-700);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .rules-info-content {
            font-size: 12px;
            color: var(--slate-600);
            line-height: 1.5;
        }

        .currency-prefix {
            position: absolute;
            left: 14px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--slate-500);
            font-weight: 600;
            pointer-events: none;
        }

        .setting-field.with-prefix {
            position: relative;
        }

        .setting-field.with-prefix .setting-input {
            padding-left: 28px;
        }

        /* Print frame for scaling */
        .print-frame {
            transform-origin: top left;
        }

        /* State Management Actions */
        .state-actions {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            z-index: 100;
        }

        .state-action-btn {
            background: var(--slate-700);
            color: white;
            border: none;
            border-radius: 50px;
            padding: 12px 20px;
            font-size: 13px;
            font-weight: 600;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .state-action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
        }

        .state-action-btn.export {
            background: var(--accent);
        }

        .state-action-btn.clear {
            background: var(--danger);
        }

        /* OPTIMIZED PRINT STYLES - A4 SINGLE PAGE */
        @media print {
            @page {
                size: A4;
                margin: 10mm;
            }

            /* Global print resets */
            * {
                -webkit-print-color-adjust: exact !important;
                print-color-adjust: exact !important;
                color-adjust: exact !important;
            }

            /* Base typography for print */
            body {
                margin: 0 !important;
                padding: 0 !important;
                background: white !important;
                font-size: 10pt !important;
                line-height: 1.4 !important;
                color: black !important;
                font-family: Georgia, 'Times New Roman', serif !important;
            }

            /* Hide non-print elements */
            .watermark,
            .upload-section,
            .loading-overlay,
            .modal-overlay,
            .validation-alert,
            .settings-btn,
            .remove-btn,
            .report-actions,
            .print-btn,
            .print-helper-text,
            .logo-mark,
            .company-header,
            .meta-badge,
            .recovery-banner,
            .state-actions,
            /* Hide RATE column (4th) AND STATUS column (11th) in print */
            thead th:nth-child(4),
            tbody td:nth-child(4),
            tfoot td:nth-child(4),
            thead th:nth-child(11),
            tbody td:nth-child(11),
            tfoot td:nth-child(11) {
                display: none !important;
            }

            /* Document container */
            .document {
                width: 100% !important;
                max-width: 100% !important;
                margin: 0 !important;
                padding: 0 !important;
                box-shadow: none !important;
                border-radius: 0 !important;
                background: white !important;
            }

            /* Report header - keep original design but optimize space */
            .report-header {
                background: #f5f5f5 !important;
                color: black !important;
                padding: 12pt !important;
                border: 1pt solid #333 !important;
                margin-bottom: 10pt !important;
                page-break-after: avoid;
            }

            .report-header::before {
                display: none !important;
            }

            .report-title {
                font-size: 16pt !important;
                color: black !important;
                text-shadow: none !important;
                margin-bottom: 6pt !important;
                font-weight: 900 !important;
                text-align: center !important;
                font-family: Georgia, serif !important;
            }

            .report-subtitle {
                font-size: 11pt !important;
                color: #444 !important;
                margin-bottom: 10pt !important;
                text-align: center !important;
                font-weight: 600 !important;
                font-family: Verdana, Arial, sans-serif !important;
            }

            .report-metadata {
                background: white !important;
                border: 0.5pt solid #666 !important;
                padding: 6pt !important;
                display: grid !important;
                grid-template-columns: repeat(4, 1fr) !important;
                gap: 0 !important;
            }

            .metadata-item {
                text-align: center !important;
                border-right: 0.5pt solid #ddd !important;
                padding: 0 4pt !important;
            }

            .metadata-item:last-child {
                border-right: none !important;
            }

            .metadata-label {
                font-size: 7pt !important;
                color: #666 !important;
                text-transform: uppercase !important;
                letter-spacing: 0.3pt !important;
                font-weight: 600 !important;
                font-family: Verdana, Arial, sans-serif !important;
                margin-bottom: 2pt !important;
            }

            .metadata-value {
                font-size: 9pt !important;
                color: black !important;
                font-weight: 700 !important;
                font-family: Georgia, serif !important;
            }

            /* KPI section */
            .kpi-section {
                background: white !important;
                padding: 0 !important;
                margin-bottom: 10pt !important;
                page-break-inside: auto;
            }

            .section-header {
                margin-bottom: 6pt !important;
                page-break-after: avoid;
                border-bottom: 1pt solid #333 !important;
                padding-bottom: 3pt !important;
            }

            .section-header::after {
                display: none !important;
            }

            .section-number {
                background: black !important;
                color: white !important;
                width: 18pt !important;
                height: 18pt !important;
                font-size: 9pt !important;
                box-shadow: none !important;
                margin-right: 6pt !important;
                font-weight: bold !important;
            }

            .section-title {
                font-size: 11pt !important;
                color: black !important;
                font-weight: 800 !important;
                font-family: Verdana, Arial, sans-serif !important;
            }

            /* KPI cards - max 5 in single row */
            .kpi-grid {
                display: grid !important;
                grid-template-columns: repeat(5, 1fr) !important;
                gap: 6pt !important;
                margin-bottom: 10pt !important;
            }

            .kpi-card {
                background: white !important;
                border: 1pt solid #666 !important;
                padding: 6pt !important;
                box-shadow: none !important;
                page-break-inside: avoid;
                min-height: 45pt !important;
            }

            .kpi-card:nth-child(n+6) {
                display: none !important;
            }

            .kpi-card.primary {
                border: 1pt solid black !important;
                background: #fafafa !important;
            }

            .kpi-card.success {
                border: 1pt solid black !important;
                background: #fafafa !important;
            }

            .kpi-card.danger {
                border: 1pt solid black !important;
                background: #f5f5f5 !important;
            }

            .kpi-card#differenceCard.success {
                border: 1pt solid black !important;
                background: #fafafa !important;
            }

            .kpi-card#differenceCard.danger {
                border: 1pt solid black !important;
                background: #f5f5f5 !important;
            }

            .kpi-label {
                font-size: 6pt !important;
                color: #555 !important;
                margin-bottom: 2pt !important;
                text-transform: uppercase !important;
                letter-spacing: 0.2pt !important;
                font-weight: 700 !important;
                line-height: 1.1 !important;
                font-family: Verdana, Arial, sans-serif !important;
            }

            .kpi-value {
                font-size: 12pt !important;
                color: black !important;
                margin-bottom: 2pt !important;
                font-weight: 900 !important;
                line-height: 1 !important;
                font-family: Georgia, serif !important;
                font-variant-numeric: tabular-nums !important;
            }

            .kpi-change {
                font-size: 6pt !important;
                color: #555 !important;
                line-height: 1.1 !important;
                font-family: Verdana, Arial, sans-serif !important;
            }

            /* Table section */
            .table-section {
                background: white !important;
                padding: 0 !important;
                margin-bottom: 10pt !important;
            }

            .table-wrapper {
                border: 0.75pt solid black !important;
                box-shadow: none !important;
                margin-top: 6pt !important;
                overflow: visible !important;
            }

            table {
                width: 100% !important;
                font-size: 8pt !important;
                table-layout: fixed !important;
                border-collapse: collapse !important;
                font-family: Verdana, Arial, sans-serif !important;
            }

            /* Column widths optimized (RATE and STATUS columns hidden) - 9 visible columns */
            colgroup {
                display: table-column-group !important;
            }
            
            col:nth-child(4),
            col:nth-child(11) {
                display: none !important;
                width: 0 !important;
            }
            
            /* Apply consistent widths and borders to all rows */
            thead th:nth-child(1),
            tbody td:nth-child(1),
            tfoot td:nth-child(1) { width: 12% !important; }
            
            thead th:nth-child(2),
            tbody td:nth-child(2),
            tfoot td:nth-child(2) { width: 10% !important; }
            
            thead th:nth-child(3),
            tbody td:nth-child(3),
            tfoot td:nth-child(3) { width: 14% !important; }
            
            thead th:nth-child(5),
            tbody td:nth-child(5),
            tfoot td:nth-child(5) { width: 12% !important; }
            
            thead th:nth-child(6),
            tbody td:nth-child(6),
            tfoot td:nth-child(6) { width: 13% !important; }
            
            thead th:nth-child(7),
            tbody td:nth-child(7),
            tfoot td:nth-child(7) { 
                width: 11% !important;
                border-right: 1pt solid #333 !important;
            }
            
            thead th:nth-child(8),
            tbody td:nth-child(8),
            tfoot td:nth-child(8) { width: 13% !important; }
            
            thead th:nth-child(9),
            tbody td:nth-child(9),
            tfoot td:nth-child(9) { 
                width: 12% !important;
                border-right: 1pt solid #333 !important;
            }
            
            thead th:nth-child(10),
            tbody td:nth-child(10),
            tfoot td:nth-child(10) { width: 13% !important; }

            thead {
                background: #e8e8e8 !important;
                display: table-header-group !important;
            }

            thead th {
                background: #e8e8e8 !important;
                color: black !important;
                font-size: 7pt !important;
                padding: 4pt 2pt !important;
                border-bottom: 0.75pt solid black !important;
                border-right: 0.5pt solid #ccc !important;
                font-weight: 800 !important;
                text-transform: uppercase !important;
                letter-spacing: 0.2pt !important;
                line-height: 1.2 !important;
                vertical-align: middle !important;
                font-family: Verdana, Arial, sans-serif !important;
                text-align: center !important;
                white-space: normal !important;
                word-break: normal !important;
            }

            thead th:nth-child(3) {
                font-size: 6.5pt !important;
                letter-spacing: 0.1pt !important;
                padding: 4pt 1pt !important;
            }

            thead th.text-right {
                text-align: right !important;
            }

            tbody tr {
                page-break-inside: auto;
                border-bottom: 0.5pt solid #ddd !important;
            }

            tbody tr:hover {
                background: transparent !important;
            }

            tbody td {
                padding: 3pt 2pt !important;
                font-size: 7.5pt !important;
                color: black !important;
                border-right: 0.5pt solid #e8e8e8 !important;
                vertical-align: middle !important;
                line-height: 1.2 !important;
                font-family: Verdana, Arial, sans-serif !important;
                text-align: center !important;
                font-weight: normal !important;
            }

            tbody td:nth-child(7) {
                border-right: 1pt solid #ccc !important;
            }

            tbody td:nth-child(1) {
                font-weight: normal !important;
            }
            
            tbody td:nth-child(1) .cell-date {
                font-weight: normal !important;
            }

            .cell-currency {
                font-size: 8pt !important;
                color: black !important;
                font-weight: normal !important;
                text-align: right !important;
                padding-right: 3pt !important;
                font-family: Georgia, serif !important;
                font-variant-numeric: tabular-nums !important;
            }

            tbody td:nth-child(10) {
                font-weight: 700 !important;
                font-size: 8pt !important;
            }
            
            tbody td:nth-child(10) .cell-currency {
                font-weight: 700 !important;
                font-size: 8pt !important;
            }

            .cell-date {
                font-size: 7.5pt !important;
                color: black !important;
                font-weight: normal !important;
                font-family: Georgia, serif !important;
            }

            .cell-day {
                color: #444 !important;
                font-size: 7pt !important;
                font-weight: normal !important;
            }

            .cell-number {
                font-size: 8pt !important;
                color: black !important;
                font-weight: normal !important;
                font-variant-numeric: tabular-nums !important;
            }

            tfoot {
                background: #333 !important;
                color: white !important;
                display: table-footer-group !important;
                page-break-inside: avoid;
            }

            tfoot td {
                padding: 4pt 3pt !important;
                font-size: 8pt !important;
                font-weight: 800 !important;
                border-top: 1pt solid black !important;
                border-right: 0.5pt solid #555 !important;
                color: white !important;
                display: table-cell !important;
                visibility: visible !important;
            }
            
            tfoot td:nth-child(4) {
                display: none !important;
            }
            
            tfoot td:nth-child(11) {
                display: none !important;
            }

            tfoot td:first-child {
                padding-left: 5pt !important;
                text-align: left !important;
                font-weight: 900 !important;
            }

            tfoot td:nth-child(3) {
                display: table-cell !important;
                text-align: center !important;
                font-weight: 900 !important;
                font-size: 9pt !important;
                color: white !important;
                visibility: visible !important;
                border-right: 0.5pt solid #555 !important;
            }

            tfoot td:nth-child(7) {
                border-right: 1pt solid #555 !important;
            }

            tfoot td:nth-child(9) {
                border-right: 1pt solid #555 !important;
            }

            tfoot td:nth-child(5) {
                display: table-cell !important;
                text-align: right !important;
                padding-right: 3pt !important;
                visibility: visible !important;
                border-right: 0.5pt solid #555 !important;
            }

            tfoot td:nth-child(6) {
                text-align: right !important;
                padding-right: 3pt !important;
            }

            tfoot td:nth-child(1),
            tfoot td:nth-child(2),
            tfoot td:nth-child(3),
            tfoot td:nth-child(5),
            tfoot td:nth-child(6),
            tfoot td:nth-child(7),
            tfoot td:nth-child(8),
            tfoot td:nth-child(9),
            tfoot td:nth-child(10) {
                display: table-cell !important;
                visibility: visible !important;
            }

            tfoot .cell-currency {
                color: white !important;
                font-size: 9pt !important;
                text-align: right !important;
                padding-right: 3pt !important;
                font-weight: 900 !important;
                font-variant-numeric: tabular-nums !important;
                display: inline !important;
            }

            #footerConsignments {
                display: table-cell !important;
                visibility: visible !important;
                text-align: center !important;
                font-weight: 900 !important;
                font-size: 9pt !important;
                color: white !important;
            }
            
            #footerBase {
                display: table-cell !important;
                visibility: visible !important;
            }

            /* Settlement section */
            .settlement-section {
                background: white !important;
                padding: 0 !important;
                page-break-inside: auto;
                margin-bottom: 10pt !important;
            }

            .settlement-grid {
                display: grid !important;
                grid-template-columns: 65% 35% !important;
                gap: 8pt !important;
                width: 100% !important;
            }

            .breakdown-details {
                background: white !important;
                border: 0.75pt solid black !important;
                padding: 6pt !important;
                width: 100% !important;
            }

            .breakdown-row {
                padding: 2pt 0 !important;
                border-bottom: 0.5pt solid #ddd !important;
                display: flex !important;
                justify-content: space-between !important;
            }

            .breakdown-row:last-child {
                border-bottom: none !important;
            }

            .breakdown-label {
                font-size: 7pt !important;
                color: #333 !important;
                font-weight: 600 !important;
                font-family: Verdana, Arial, sans-serif !important;
            }

            .breakdown-value {
                font-size: 8.5pt !important;
                color: black !important;
                font-weight: 700 !important;
                font-family: Georgia, serif !important;
                font-variant-numeric: tabular-nums !important;
            }

            .breakdown-row.total {
                border-top: 1pt solid black !important;
                margin-top: 3pt !important;
                padding-top: 3pt !important;
                background: #f5f5f5 !important;
                margin-left: -6pt !important;
                margin-right: -6pt !important;
                padding-left: 6pt !important;
                padding-right: 6pt !important;
            }

            .breakdown-row.total .breakdown-label {
                font-size: 8pt !important;
                font-weight: 800 !important;
                color: black !important;
            }

            .breakdown-row.total .breakdown-value {
                font-size: 10pt !important;
                color: black !important;
                font-weight: 900 !important;
            }

            .payment-status {
                background: white !important;
                color: black !important;
                border: none !important;
                border-top: 1.5pt solid black !important;
                border-right: 1.5pt solid black !important;
                border-bottom: 1.5pt solid black !important;
                border-left: 1.5pt solid black !important;
                padding: 8pt !important;
                box-shadow: none !important;
                text-align: center !important;
                min-height: 70pt !important;
                display: block !important;
                position: relative !important;
                box-sizing: border-box !important;
            }

            .payment-status.positive {
                border: none !important;
                border-top: 2pt double black !important;
                border-right: 2pt double black !important;
                border-bottom: 2pt double black !important;
                border-left: 2pt double black !important;
                background: #fafafa !important;
            }

            .status-icon {
                font-size: 16pt !important;
                margin-bottom: 3pt !important;
                line-height: 1 !important;
                display: block !important;
                position: relative !important;
                z-index: 2 !important;
            }

            .status-label {
                font-size: 6pt !important;
                color: #555 !important;
                text-transform: uppercase !important;
                letter-spacing: 0.3pt !important;
                font-weight: 700 !important;
                margin-bottom: 2pt !important;
                font-family: Verdana, Arial, sans-serif !important;
                position: relative !important;
                z-index: 2 !important;
            }

            .status-value {
                font-size: 12pt !important;
                color: black !important;
                font-weight: 900 !important;
                line-height: 1 !important;
                font-family: Georgia, serif !important;
                font-variant-numeric: tabular-nums !important;
                display: block !important;
                margin-bottom: 10pt !important;
                position: relative !important;
                z-index: 2 !important;
            }

            /* Document footer */
            .print-footer {
                display: block !important;
                position: fixed;
                bottom: 8mm;
                left: 10mm;
                right: 10mm;
                font-size: 7pt !important;
                color: #666 !important;
                border-top: 0.5pt solid #ccc !important;
                padding-top: 3pt !important;
                font-family: Verdana, Arial, sans-serif !important;
            }

            .print-footer::after {
                content: "Talysson Oliveira - A17" !important;
                float: right !important;
            }

            .print-footer::before {
                content: "© 2025 - Confidential Document" !important;
                float: left !important;
            }
        }
    </style>

<style>
/* === PRINT-ONLY FIX v6.0.0 ===
   Scope: Daily table footer alignment (hide RATE/STATUS correctly in TFOOT);
          Payment Status border parity + centered text.
   Runtime UI untouched.
*/
@media print {
  /* Footer alignment when RATE (4) and STATUS (11) are hidden in THEAD/TBODY */
  .table-section thead th:nth-child(4),
  .table-section tbody td:nth-child(4) { display: none !important; }
  .table-section thead th:nth-child(11),
  .table-section tbody td:nth-child(11) { display: none !important; }

  /* TFOOT mapping (first cell has colspan=2):
     cells index => [1:TOTALS(colspan=2), 2:Consignments, 3:RATE placeholder, 4:Base, 5:Pickups, 6:Bonuses, 7:Expected, 8:Paid, 9:Difference, 10:STATUS placeholder] */
  .table-section tfoot td { display: table-cell !important; }
  .table-section tfoot td:nth-child(3)  { display: none !important; }
  .table-section tfoot td:nth-child(10) { display: none !important; }

  /* Payment Status — make border match breakdown-details and center contents */
  .payment-status {
    background: #fff !important;
    color: #111 !important;
    border: 1px solid var(--slate-200) !important;
    border-radius: 16px !important;
    box-shadow: none !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    text-align: center !important;
    padding: 35px !important;
  }
}
</style>


<style id="__pa_print_hygiene">
@media print{
  #__pa_mode_badge, #__pa_diag_panel, #__pa_tools_btn { display:none !important; visibility:hidden !important; opacity:0 !important; }
}
</style>

</head>
<body>
    <div class="watermark">ANALYZER</div>
    
    <!-- Recovery Banner -->
    <div class="recovery-banner" id="recoveryBanner">
        <span class="recovery-banner-text" id="recoveryText">Restored your last analysis</span>
        <button class="recovery-banner-action" id="startNewBtn">Start New Analysis</button>
        <button class="recovery-banner-close" id="closeBannerBtn">×</button>
    </div>
    
    <!-- Settings Modal -->
    <div class="modal-overlay" id="settingsModal">
        <div class="modal">
            <div class="modal-header">
                <div class="modal-title">
                    <span>⚙️</span>
                    <span>Payment Rules Configuration</span>
                </div>
                <button class="modal-close" id="closeModal">✕</button>
            </div>
            
            <div class="modal-body">
                <div class="rules-info">
                    <div class="rules-info-title">
                        <span>ℹ️</span>
                        <span>About Payment Rules</span>
                    </div>
                    <div class="rules-info-content">
                        Configure the payment rates and bonuses used for calculating expected payments. Changes apply immediately to the current analysis session and are saved for future use.
                    </div>
                </div>

                <div class="settings-section">
                    <div class="settings-section-title">Consignment Rates</div>
                    <div class="settings-row">
                        <div class="setting-field with-prefix">
                            <label class="setting-label">
                                Weekday Rate
                                <span title="Monday-Friday rate per consignment">ⓘ</span>
                            </label>
                            <span class="currency-prefix">£</span>
                            <input type="number" class="setting-input" id="weekdayRate" min="0" step="0.01" value="2.00">
                            <div class="setting-description">Rate per consignment Mon-Fri</div>
                        </div>
                        <div class="setting-field with-prefix">
                            <label class="setting-label">
                                Saturday Rate
                                <span title="Saturday rate per consignment">ⓘ</span>
                            </label>
                            <span class="currency-prefix">£</span>
                            <input type="number" class="setting-input" id="saturdayRate" min="0" step="0.01" value="3.00">
                            <div class="setting-description">Rate per consignment on Saturday</div>
                        </div>
                    </div>
                </div>

                <div class="settings-section">
                    <div class="settings-section-title">Daily Bonuses</div>
                    <div class="settings-group">
                        <div class="setting-field with-prefix">
                            <label class="setting-label">
                                Unloading Bonus
                                <span title="Daily unloading bonus (not paid on Mondays)">ⓘ</span>
                            </label>
                            <span class="currency-prefix">£</span>
                            <input type="number" class="setting-input" id="unloadingBonus" min="0" step="0.01" value="30.00">
                            <div class="setting-description">Paid daily except Mondays</div>
                        </div>
                        <div class="setting-field with-prefix">
                            <label class="setting-label">
                                Attendance Bonus
                                <span title="Daily attendance bonus (weekdays only)">ⓘ</span>
                            </label>
                            <span class="currency-prefix">£</span>
                            <input type="number" class="setting-input" id="attendanceBonus" min="0" step="0.01" value="25.00">
                            <div class="setting-description">Paid on weekdays only (not Saturday)</div>
                        </div>
                        <div class="setting-field with-prefix">
                            <label class="setting-label">
                                Early Arrival Bonus
                                <span title="Daily early arrival bonus (weekdays only)">ⓘ</span>
                            </label>
                            <span class="currency-prefix">£</span>
                            <input type="number" class="setting-input" id="earlyBonus" min="0" step="0.01" value="50.00">
                            <div class="setting-description">Paid on weekdays only (not Saturday)</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer">
                <div class="modal-info">
                    <span>💡</span>
                    <span>Changes are saved automatically</span>
                </div>
                <div class="modal-actions">
                    <button class="btn-secondary" id="resetRules">Reset to Defaults</button>
                    <button class="btn-primary" id="saveRules">Apply Changes</button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="document print-frame">
        <header class="company-header">
            <div class="company-branding">
                <div class="company-logo">
                    <div class="logo-mark">PA</div>
                    <div class="company-details">
                        <h1>Payment Analyzer Professional</h1>
                        <p>Automated Payment Analysis System</p>
                        <p>Version 6.0 | State Management Edition | Talysson A17</p>
                    </div>
                </div>
                <div class="document-meta">
                    <div class="meta-badge" id="validationBadge">ANALYSIS PENDING</div>
                    <button class="settings-btn" id="settingsBtn" title="Payment Rules Settings">
                        <span>⚙️</span>
                        <span>SETTINGS</span>
                    </button>
                </div>
            </div>
        </header>

        <section class="upload-section">
            <div class="upload-area" id="uploadArea">
                <div class="upload-content">
                    <div class="upload-icon">📄</div>
                    <div class="upload-title">Select PDF Files</div>
                    <div class="upload-subtitle">Runsheets and Self Bill Invoice</div>
                </div>
            </div>
            
            <input type="file" id="fileInput" class="file-input" multiple accept=".pdf">
            
            <div class="file-list" id="fileList"></div>
            
            <button class="analyze-btn" id="analyzeBtn" disabled>
                🔍 Analyze Documents
            </button>

            <div class="validation-alert" id="validationAlert">
                <span class="validation-icon">⚠️</span>
                <span id="validationMessage"></span>
            </div>
        </section>

        <div class="loading-overlay" id="loadingOverlay">
            <div class="loading-card">
                <div class="spinner"></div>
                <div class="loading-text">Processing documents...</div>
                <div class="loading-progress">
                    <div class="loading-progress-bar" id="progressBar" style="width: 0%"></div>
                </div>
            </div>
        </div>

        <div class="results-section" id="resultsSection">
            <div class="report-actions">
                <button class="print-btn" id="printBtn">
                    <span class="print-btn-icon">🖨️</span>
                    <span>Print Professional Report</span>
                </button>
                <div class="print-helper-text">Publication-quality A4 single page - Tap to save or share as PDF</div>
            </div>
            
            <section class="report-header">
                <h2 class="report-title">Financial Analysis Report</h2>
                <p class="report-subtitle">Payment Comparison: Expected vs Actual</p>
                <div class="report-metadata">
                    <div class="metadata-item">
                        <span class="metadata-label">Period Analyzed</span>
                        <span class="metadata-value" id="periodRange">-</span>
                    </div>
                    <div class="metadata-item">
                        <span class="metadata-label">Total Days</span>
                        <span class="metadata-value" id="totalDays">-</span>
                    </div>
                    <div class="metadata-item">
                        <span class="metadata-label">Analysis Date</span>
                        <span class="metadata-value" id="analysisDate">-</span>
                    </div>
                    <div class="metadata-item">
                        <span class="metadata-label">Overall Status</span>
                        <span class="metadata-value" id="overallStatus">-</span>
                    </div>
                </div>
            </section>

            <section class="kpi-section">
                <div class="section-header">
                    <div class="section-number">1</div>
                    <h3 class="section-title">Executive Dashboard</h3>
                </div>
                
                <div class="kpi-grid">
                    <div class="kpi-card primary">
                        <div class="kpi-label">Total Expected</div>
                        <div class="kpi-value" id="totalExpected">£0.00</div>
                        <div class="kpi-change">
                            <span>Based on contractual rules</span>
                        </div>
                    </div>
                    
                    <div class="kpi-card success">
                        <div class="kpi-label">Total Paid</div>
                        <div class="kpi-value" id="totalPaid">£0.00</div>
                        <div class="kpi-change">
                            <span>Invoice amount</span>
                        </div>
                    </div>
                    
                    <div class="kpi-card" id="differenceCard">
                        <div class="kpi-label">Total Difference</div>
                        <div class="kpi-value" id="totalDifference">£0.00</div>
                        <div class="kpi-change" id="differenceStatus">
                            <span>-</span>
                        </div>
                    </div>
                    
                    <div class="kpi-card">
                        <div class="kpi-label">Total Consignments</div>
                        <div class="kpi-value" id="totalConsignments">0</div>
                        <div class="kpi-change">
                            <span id="avgConsignments">Average: 0/day</span>
                        </div>
                    </div>
                    
                    <div class="kpi-card">
                        <div class="kpi-label">Pickup Services</div>
                        <div class="kpi-value" id="totalPickupValue">£0.00</div>
                        <div class="kpi-change">
                            <span id="totalPickupCount">0 services</span>
                        </div>
                    </div>
                </div>
            </section>

            <section class="table-section">
                <div class="section-header">
                    <div class="section-number">2</div>
                    <h3 class="section-title">Daily Detailed Analysis</h3>
                </div>
                
                <div class="table-wrapper">
                    <table>
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Day</th>
                                <th>Consignments</th>
                                <th class="text-right">Rate</th>
                                <th class="text-right">Base<br>Value</th>
                                <th class="text-right">Pickups</th>
                                <th class="text-right">Bonuses</th>
                                <th class="text-right">Expected</th>
                                <th class="text-right">Paid</th>
                                <th class="text-right">Difference</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="resultsTableBody">
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="2" style="text-align: left; font-weight: 900;">TOTALS</td>
                                <td class="cell-number" id="footerConsignments">0</td>
                                <td></td>
                                <td class="cell-currency" id="footerBase">£0.00</td>
                                <td class="cell-currency" id="footerPickups">£0.00</td>
                                <td class="cell-currency" id="footerBonus">£0.00</td>
                                <td class="cell-currency" id="footerExpected">£0.00</td>
                                <td class="cell-currency" id="footerPaid">£0.00</td>
                                <td class="cell-currency" id="footerDifference">£0.00</td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </section>

            <section class="settlement-section">
                <div class="section-header">
                    <div class="section-number">3</div>
                    <h3 class="section-title">Settlement Summary</h3>
                </div>
                
                <div class="settlement-grid">
                    <div class="breakdown-details">
                        <div class="breakdown-row">
                            <span class="breakdown-label">Payment for Consignments</span>
                            <span class="breakdown-value" id="breakdownConsignments">£0.00</span>
                        </div>
                        <div class="breakdown-row">
                            <span class="breakdown-label">Pickup Services (<span id="pickupCount">0</span> total)</span>
                            <span class="breakdown-value" id="breakdownPickups">£0.00</span>
                        </div>
                        <div class="breakdown-row">
                            <span class="breakdown-label">Unloading Bonus (<span id="unloadingRate">£30</span>/day, except Monday)</span>
                            <span class="breakdown-value" id="breakdownUnloading">£0.00</span>
                        </div>
                        <div class="breakdown-row">
                            <span class="breakdown-label">Attendance Bonus (<span id="attendanceRate">£25</span>/day)</span>
                            <span class="breakdown-value" id="breakdownAttendance">£0.00</span>
                        </div>
                        <div class="breakdown-row">
                            <span class="breakdown-label">Early Arrival Bonus (<span id="earlyRate">£50</span>/day)</span>
                            <span class="breakdown-value" id="breakdownEarly">£0.00</span>
                        </div>
                        <div class="breakdown-row total">
                            <span class="breakdown-label">TOTAL EXPECTED VALUE</span>
                            <span class="breakdown-value" id="breakdownTotal">£0.00</span>
                        </div>
                    </div>
                    
                    <div class="payment-status" id="paymentStatus">
                        <div class="status-icon" id="statusIcon">⚠️</div>
                        <div class="status-label">Payment Status</div>
                        <div class="status-value" id="statusValue">£0.00</div>
                    </div>
                </div>
            </section>

            <div class="print-footer"></div>
        </div>
    </div>

    <!-- State Management Actions -->
    <div class="state-actions" id="stateActions" style="display: none;">
        <button class="state-action-btn export" id="exportStateBtn" title="Export Analysis Data">
            <span>💾</span>
            <span>Export Data</span>
        </button>
        <button class="state-action-btn clear" id="clearStateBtn" title="Clear Saved Data">
            <span>🗑️</span>
            <span>Clear Data</span>
        </button>
    </div>

    <script>
async function extractTextFromPDF(file) {
            const arrayBuffer = await file.arrayBuffer();
            const pdf = await pdfjsLib.getDocument(arrayBuffer).promise;
            
            let fullText = '';
            for (let i = 1; i <= pdf.numPages; i++) {
                const page = await pdf.getPage(i);
                const textContent = await page.getTextContent();
                fullText += textContent.items.map(item => item.str).join(' ') + '\n';
            }
            return fullText;
        }

function extractDateFromRunsheet(text) {
            const match = text.match(/Date:\s*(\d{2}[-\/]\d{2}[-\/]\d{4})/);
            if (match) {
                const parts = match[1].replace(/\//g, '-').split('-');
                return `${parts[2]}-${parts[1].padStart(2,'0')}-${parts[0].padStart(2,'0')}`;
            }
            return null;
        }

function extractConsignmentsFromRunsheet(text) {
            const tokens = text.split(/\s+/);
            const consignmentsList = [];
            
            for (let i = 0; i < tokens.length - 1; i++) {
                const token = tokens[i];
                const nextToken = tokens[i + 1];
                
                if (/^\d+$/.test(token)) {
                    const num = parseInt(token);
                    
                    if (/^\d{7}$/.test(nextToken) || /^AH\d+$/.test(nextToken)) {
                        const nearbyTokens = tokens.slice(i, i + 10).join(' ');
                        if (nearbyTokens.includes('Delivery') || nearbyTokens.includes('Collection')) {
                            consignmentsList.push({
                                number: num,
                                id: nextToken
                            });
                        }
                    }
                }
            }
            
            if (consignmentsList.length > 0) {
                console.log(`✅ Runsheet - Total deliveries: ${consignmentsList.length}`);
                console.log(`  First: ${consignmentsList.slice(0, 3).map(c => `#${c.number} ${c.id}`).join(', ')}`);
                console.log(`  Last: ${consignmentsList.slice(-3).map(c => `#${c.number} ${c.id}`).join(', ')}`);
            }
            
            return consignmentsList.length;
        }

function extractDocumentTotal(text) {
            const totalPatterns = [
                /Docket\s+Total:\s*([0-9,]+\.?\d*)/i,
                /GBP\s*([0-9,]+\.?\d*)\s*Total:/i,
                /Total:\s*GBP\s*([0-9,]+\.?\d*)/i,
                /Total:\s*([0-9,]+\.?\d*)/i
            ];
            
            for (const pattern of totalPatterns) {
                const match = text.match(pattern);
                if (match) {
                    const amount = parseFloat(match[1].replace(/,/g, ''));
                    if (amount > 0) {
                        console.log(`📊 Document total found: £${amount.toFixed(2)}`);
                        return amount;
                    }
                }
            }
            
            console.log('⚠️ Document total not found');
            return null;
        }

function extractInvoiceAmounts(text) {
            const amounts = {};
            const pickups = {};
            
            console.log('📄 Processing Invoice...');
            
            const documentTotal = extractDocumentTotal(text);
            
            const tokens = text.split(/\s+/);
            let currentDate = null;
            let currentTime = null;
            const processedExtraDrops = new Set();
            let serviceBlockOpen = false;
            let lastAmountIndex = -1;
            
            for (let i = 0; i < tokens.length; i++) {
                const token = tokens[i];
                
                if (token === 'Docket' && i + 1 < tokens.length && tokens[i+1] === 'Total:') {
                    console.log('  ✓ Reached invoice summary - stopping extraction');
                    break;
                }
                
                if (/^\d{2}\/\d{2}\/\d{2}$/.test(token)) {
                    if (i + 1 < tokens.length && /^\d{2}:\d{2}$/.test(tokens[i + 1])) {
                        serviceBlockOpen = false;
                        
                        const [day, month, year] = token.split('/');
                        currentDate = `20${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                        currentTime = tokens[i + 1];
                        serviceBlockOpen = true;
                        
                        const isPickup = i + 2 < tokens.length && tokens[i + 2] === '-PickUp';
                        
                        console.log(`  📅 Found service: ${currentDate} ${currentTime}${isPickup ? ' (PICKUP)' : ''}`);
                        
                        let foundAmount = false;
                        for (let j = i + 2; j < Math.min(i + 30, tokens.length); j++) {
                            const checkToken = tokens[j];
                            
                            if (/^\d+\.\d+/.test(checkToken)) {
                                const match = checkToken.match(/^(\d+\.\d{2})/);
                                if (match) {
                                    const amount = parseFloat(match[1]);
                                    
                                    if (amount >= 3 && amount <= 500) {
                                        if (!amounts[currentDate]) amounts[currentDate] = 0;
                                        amounts[currentDate] += amount;
                                        lastAmountIndex = j;
                                        
                                        if (isPickup) {
                                            if (!pickups[currentDate]) {
                                                pickups[currentDate] = { count: 0, total: 0 };
                                            }
                                            pickups[currentDate].count++;
                                            pickups[currentDate].total += amount;
                                            console.log(`    🚚 ${currentDate}: +£${amount.toFixed(2)} (PickUp Service #${pickups[currentDate].count})`);
                                        } else {
                                            const contextTokens = tokens.slice(i, j);
                                            let serviceType = 'Unknown';
                                            if (contextTokens.includes('Multidrops')) serviceType = 'Multidrops';
                                            else if (contextTokens.includes('Small') && contextTokens.includes('Van')) serviceType = 'Small Van';
                                            else if (contextTokens.includes('LWB')) serviceType = 'LWB Transit';
                                            
                                            console.log(`    💰 ${currentDate}: +£${amount.toFixed(2)} (${serviceType})`);
                                        }
                                        foundAmount = true;
                                        break;
                                    }
                                }
                            }
                        }
                        
                        if (!foundAmount) {
                            console.log(`    ⚠️ No valid amount found for ${currentDate} ${currentTime}`);
                        }
                    }
                }
                
                if (serviceBlockOpen && token === 'Extra' && i + 1 < tokens.length && tokens[i + 1] === 'Drops') {
                    for (let m = i + 2; m < Math.min(i + 5, tokens.length); m++) {
                        const extraMatch = tokens[m].match(/^(\d+\.\d{2})/);
                        if (extraMatch) {
                            const extraAmount = parseFloat(extraMatch[1]);
                            if (extraAmount > 0 && extraAmount < 50) {
                                const extraKey = `${currentDate}|${currentTime}|${i}|${extraAmount}`;
                                if (!processedExtraDrops.has(extraKey) && currentDate) {
                                    if (!amounts[currentDate]) amounts[currentDate] = 0;
                                    amounts[currentDate] += extraAmount;
                                    processedExtraDrops.add(extraKey);
                                    console.log(`    🎯 ${currentDate}: +£${extraAmount.toFixed(2)} (Extra Drops)`);
                                }
                                break;
                            }
                        }
                    }
                }
                
                if (token === 'Carried' && i + 1 < tokens.length && tokens[i + 1] === 'Forward') {
                    console.log('  📄 Found "Carried Forward" - multi-page invoice detected');
                }
            }
            
            const finalAmounts = {};
            let extractedTotal = 0;
            console.log('\n📊 Daily totals:');
            for (const [date, total] of Object.entries(amounts)) {
                finalAmounts[date] = Math.round(total * 100) / 100;
                extractedTotal += finalAmounts[date];
                console.log(`  ${date}: £${finalAmounts[date].toFixed(2)}`);
                if (pickups[date]) {
                    console.log(`    └─ Includes ${pickups[date].count} pickup(s): £${pickups[date].total.toFixed(2)}`);
                }
            }
            
            let validationPassed = true;
            if (documentTotal !== null) {
                const difference = Math.abs(extractedTotal - documentTotal);
                const tolerance = 0.01;
                
                console.log(`\n🔍 VALIDATION RESULTS:`);
                console.log(`  Extracted total: £${extractedTotal.toFixed(2)}`);
                console.log(`  Document total:  £${documentTotal.toFixed(2)}`);
                console.log(`  Difference:      £${difference.toFixed(2)}`);
                
                if (difference > tolerance) {
                    validationPassed = false;
                    console.log(`  ❌ VALIDATION FAILED - Extraction mismatch detected!`);
                    console.log(`  ⚠️ Amounts may be incorrect. Please review manually.`);
                    showValidationAlert(`Invoice validation failed: Expected £${documentTotal.toFixed(2)}, extracted £${extractedTotal.toFixed(2)} (diff: £${difference.toFixed(2)}). Results may be inaccurate.`, 'error');
                } else {
                    console.log(`  ✅ VALIDATION PASSED - Amounts match document total`);
                    showValidationAlert(`Invoice validation successful: Total £${documentTotal.toFixed(2)} verified`, 'success');
                }
            } else {
                console.log('  ⚠️ Could not validate - document total not found');
                showValidationAlert('Warning: Could not validate invoice total. Please review results carefully.', 'warning');
            }
            
            if (Object.keys(finalAmounts).length === 0) {
                console.log('⚠️ No amounts found - check invoice format');
            }
            
            finalAmounts._validationPassed = validationPassed;
            finalAmounts._documentTotal = documentTotal;
            finalAmounts._extractedTotal = extractedTotal;
            finalAmounts._pickups = pickups;
            
            return finalAmounts;
        }


// ---- namespace (non-breaking) ----
try {
  window.PA = window.PA || {};
  window.PA.parser = {
    extractTextFromPDF,
    extractDateFromRunsheet,
    extractConsignmentsFromRunsheet,
    extractDocumentTotal,
    extractInvoiceAmounts
  };
} catch (e) { /* ignore in legacy browsers */ }
</script>
<script>
// Configure PDF.js worker
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

        // ========================================
        // STATE MANAGEMENT SYSTEM v6.0
        // ========================================
        
        // Application State Schema
        const AppState = {
            version: '6.0.0',
            lastModified: null,
            sessionId: null,
            
            // File Management
            files: {
                uploaded: [],
                processed: {
                    runsheets: {},
                    invoices: {},
                    pickups: {}
                }
            },
            
            // Configuration
            config: {
                paymentRules: {
                    weekdayRate: 2.00,
                    saturdayRate: 3.00,
                    unloadingBonus: 30.00,
                    attendanceBonus: 25.00,
                    earlyBonus: 50.00
                },
                printScale: 1
            },
            
            // Analysis Results
            analysis: {
                results: [],
                totals: {},
                validation: {
                    status: null,
                    messages: []
                },
                metadata: {
                    periodRange: '',
                    totalDays: 0,
                    analysisDate: null,
                    overallStatus: ''
                }
            },
            
            // UI State
            ui: {
                isLoading: false,
                loadingProgress: 0,
                currentModal: null,
                alerts: [],
                resultsVisible: false,
                recoveryShown: false
            }
        };

        // State Manager Module
        const StateManager = {
            state: JSON.parse(JSON.stringify(AppState)), // Deep clone
            listeners: new Map(),
            
            // Initialize state
            init() {
                this.state.sessionId = this.generateSessionId();
                this.state.lastModified = Date.now();
                console.log('🎯 State Manager initialized:', this.state.version);
            },
            
            // Generate unique session ID
            generateSessionId() {
                return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            },
            
            // Get state or specific path
            getState(path = null) {
                if (!path) return this.state;
                
                const keys = path.split('.');
                let current = this.state;
                
                for (const key of keys) {
                    if (current[key] === undefined) return undefined;
                    current = current[key];
                }
                
                return current;
            },
            
            // Update state immutably
            updateState(path, value) {
                const newState = JSON.parse(JSON.stringify(this.state));
                const keys = path.split('.');
                let current = newState;
                
                for (let i = 0; i < keys.length - 1; i++) {
                    if (!current[keys[i]]) current[keys[i]] = {};
                    current = current[keys[i]];
                }
                
                current[keys[keys.length - 1]] = value;
                newState.lastModified = Date.now();
                
                this.state = newState;
                this.notifyListeners(path, value);
                
                // Auto-persist on state changes (debounced)
                this.persistDebounced();
                
                return this.state;
            },
            
            // Batch update multiple paths
            batchUpdate(updates) {
                const newState = JSON.parse(JSON.stringify(this.state));
                
                for (const [path, value] of Object.entries(updates)) {
                    const keys = path.split('.');
                    let current = newState;
                    
                    for (let i = 0; i < keys.length - 1; i++) {
                        if (!current[keys[i]]) current[keys[i]] = {};
                        current = current[keys[i]];
                    }
                    
                    current[keys[keys.length - 1]] = value;
                }
                
                newState.lastModified = Date.now();
                this.state = newState;
                
                // Notify all listeners
                for (const [path, value] of Object.entries(updates)) {
                    this.notifyListeners(path, value);
                }
                
                this.persistDebounced();
                return this.state;
            },
            
            // Subscribe to state changes
            subscribe(path, callback) {
                if (!this.listeners.has(path)) {
                    this.listeners.set(path, new Set());
                }
                this.listeners.get(path).add(callback);
                
                return () => {
                    const pathListeners = this.listeners.get(path);
                    if (pathListeners) {
                        pathListeners.delete(callback);
                    }
                };
            },
            
            // Notify listeners of changes
            notifyListeners(path, value) {
                const pathListeners = this.listeners.get(path);
                if (pathListeners) {
                    pathListeners.forEach(callback => callback(value, path));
                }
                
                // Notify wildcard listeners
                const wildcardListeners = this.listeners.get('*');
                if (wildcardListeners) {
                    wildcardListeners.forEach(callback => callback(this.state, path));
                }
            },
            
            // Reset state to defaults
            reset() {
                this.state = JSON.parse(JSON.stringify(AppState));
                this.state.sessionId = this.generateSessionId();
                this.state.lastModified = Date.now();
                this.notifyListeners('*', this.state);
                PersistenceManager.clear();
                console.log('🔄 State reset to defaults');
            },
            
            // Debounced persistence
            persistDebounced: (function() {
                let timeout;
                return function() {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => {
                        PersistenceManager.save(StateManager.state);
                    }, 500);
                };
            })()
        };

        // Persistence Manager Module
        const PersistenceManager = {
            STORAGE_KEY: 'paymentAnalyzer_v6',
            SCHEMA_VERSION: 1,
            MAX_STORAGE_SIZE: 5 * 1024 * 1024, // 5MB
            
            // Save state to localStorage with compression
            save(state) {
                try {
                    const persistable = this.getPersistableState(state);
                    const serialized = JSON.stringify(persistable);
                    
                    // Check size before compression
                    if (serialized.length > this.MAX_STORAGE_SIZE) {
                        console.warn('⚠️ State too large, trimming old results');
                        persistable.analysis.results = persistable.analysis.results.slice(-30);
                    }
                    
                    // Compress using LZ-string
                    const compressed = LZString.compressToUTF16(serialized);
                    
                    // Save to localStorage
                    localStorage.setItem(this.STORAGE_KEY, compressed);
                    
                    // Save metadata separately for quick access
                    localStorage.setItem(this.STORAGE_KEY + '_meta', JSON.stringify({
                        version: state.version,
                        lastModified: state.lastModified,
                        size: compressed.length,
                        originalSize: serialized.length,
                        compressionRatio: ((1 - compressed.length / serialized.length) * 100).toFixed(1)
                    }));
                    
                    console.log(`💾 State saved (${(compressed.length / 1024).toFixed(1)}KB, ${((1 - compressed.length / serialized.length) * 100).toFixed(1)}% compressed)`);
                    return true;
                } catch (error) {
                    console.error('❌ Failed to save state:', error);
                    
                    if (error.name === 'QuotaExceededError') {
                        this.handleQuotaExceeded();
                    }
                    
                    return false;
                }
            },
            
            // Load state from localStorage
            load() {
                try {
                    const compressed = localStorage.getItem(this.STORAGE_KEY);
                    if (!compressed) return null;
                    
                    // Decompress
                    const decompressed = LZString.decompressFromUTF16(compressed);
                    if (!decompressed) {
                        console.error('❌ Failed to decompress state');
                        return null;
                    }
                    
                    // Parse and validate
                    const state = JSON.parse(decompressed);
                    
                    if (!this.validateState(state)) {
                        console.warn('⚠️ Invalid state structure, skipping recovery');
                        return null;
                    }
                    
                    // Check version compatibility
                    if (!this.isVersionCompatible(state.version)) {
                        console.log('🔄 State version incompatible, migrating...');
                        return this.migrateState(state);
                    }
                    
                    console.log('✅ State loaded successfully');
                    return state;
                } catch (error) {
                    console.error('❌ Failed to load state:', error);
                    return null;
                }
            },
            
            // Get only persistable parts of state
            getPersistableState(state) {
                return {
                    version: state.version,
                    lastModified: state.lastModified,
                    config: state.config,
                    analysis: {
                        results: state.analysis.results,
                        totals: state.analysis.totals,
                        validation: state.analysis.validation,
                        metadata: state.analysis.metadata
                    },
                    files: {
                        processed: state.files.processed
                    }
                };
            },
            
            // Validate state structure
            validateState(state) {
                if (!state || typeof state !== 'object') return false;
                if (!state.version || !state.lastModified) return false;
                if (!state.config || !state.analysis) return false;
                return true;
            },
            
            // Check version compatibility
            isVersionCompatible(version) {
                if (!version) return false;
                const [major] = version.split('.');
                const [currentMajor] = AppState.version.split('.');
                return major === currentMajor;
            },
            
            // Migrate old state to new schema
            migrateState(oldState) {
                console.log('🔄 Migrating state from', oldState.version, 'to', AppState.version);
                
                // Perform migrations based on version
                const migrated = {
                    ...JSON.parse(JSON.stringify(AppState)),
                    config: oldState.config || AppState.config,
                    analysis: oldState.analysis || AppState.analysis
                };
                
                migrated.version = AppState.version;
                migrated.lastModified = Date.now();
                
                return migrated;
            },
            
            // Handle storage quota exceeded
            handleQuotaExceeded() {
                console.log('🧹 Storage quota exceeded, cleaning up...');
                
                // Clear old analysis results
                const state = StateManager.getState();
                if (state.analysis.results.length > 10) {
                    StateManager.updateState('analysis.results', state.analysis.results.slice(-10));
                }
                
                // Clear other localStorage items if needed
                const keysToRemove = [];
                for (let i = 0; i < localStorage.length; i++) {
                    const key = localStorage.key(i);
                    if (key && !key.startsWith(this.STORAGE_KEY)) {
                        keysToRemove.push(key);
                    }
                }
                
                keysToRemove.forEach(key => localStorage.removeItem(key));
            },
            
            // Clear all saved state
            clear() {
                try {
                    localStorage.removeItem(this.STORAGE_KEY);
                    localStorage.removeItem(this.STORAGE_KEY + '_meta');
                    console.log('🗑️ Saved state cleared');
                    return true;
                } catch (error) {
                    console.error('❌ Failed to clear state:', error);
                    return false;
                }
            },
            
            // Export state as downloadable JSON
            export() {
                const state = StateManager.getState();
                const dataStr = JSON.stringify(state, null, 2);
                const dataBlob = new Blob([dataStr], { type: 'application/json' });
                const url = URL.createObjectURL(dataBlob);
                
                const link = document.createElement('a');
                link.href = url;
                link.download = `payment-analysis-${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(url);
                
                console.log('📤 State exported');
            },
            
            // Import state from JSON file
            async import(file) {
                try {
                    const text = await file.text();
                    const state = JSON.parse(text);
                    
                    if (!this.validateState(state)) {
                        throw new Error('Invalid state file');
                    }
                    
                    StateManager.state = state;
                    StateManager.notifyListeners('*', state);
                    this.save(state);
                    
                    console.log('📥 State imported successfully');
                    return true;
                } catch (error) {
                    console.error('❌ Failed to import state:', error);
                    return false;
                }
            }
        };

        // Recovery Manager Module
        const RecoveryManager = {
            // Initialize recovery on page load
            init() {
                const savedState = PersistenceManager.load();
                
                if (savedState && savedState.analysis.results.length > 0) {
                    console.log('🔄 Found saved analysis, restoring...');
                    
                    // Restore state
                    StateManager.state = {
                        ...StateManager.state,
                        ...savedState,
                        sessionId: StateManager.generateSessionId(),
                        ui: {
                            ...StateManager.state.ui,
                            resultsVisible: true,
                            recoveryShown: true
                        }
                    };
                    
                    // Display the results
                    this.restoreUI();
                    
                    // Show recovery banner
                    this.showRecoveryBanner(savedState.lastModified);
                    
                    return true;
                }
                
                return false;
            },
            
            // Restore UI from saved state
            restoreUI() {
                const state = StateManager.getState();
                
                // Hide upload section, show results
                document.getElementById('resultsSection').style.display = 'block';
                
                // Populate all UI elements with saved data
                displayResults({
                    results: state.analysis.results,
                    totals: state.analysis.totals,
                    runsheetData: state.files.processed.runsheets,
                    validationStatus: state.analysis.validation.status
                });
                
                // Show state actions
                document.getElementById('stateActions').style.display = 'flex';
                
                // Update validation badge
                const badge = document.getElementById('validationBadge');
                if (state.analysis.validation.status === false) {
                    badge.textContent = 'VALIDATION FAILED';
                    badge.className = 'meta-badge invalid';
                } else if (state.analysis.validation.status === true) {
                    badge.textContent = 'VALIDATED ANALYSIS';
                    badge.className = 'meta-badge validated';
                } else {
                    badge.textContent = 'ANALYSIS COMPLETE';
                    badge.className = 'meta-badge';
                }
                
                console.log('✅ UI restored from saved state');
            },
            
            // Show recovery banner
            showRecoveryBanner(timestamp) {
                const banner = document.getElementById('recoveryBanner');
                const text = document.getElementById('recoveryText');
                
                const date = new Date(timestamp);
                const timeAgo = this.getTimeAgo(date);
                
                text.textContent = `Restored your last analysis from ${timeAgo}`;
                banner.classList.add('show');
                
                // Auto-hide after 10 seconds
                setTimeout(() => {
                    if (banner.classList.contains('show')) {
                        banner.classList.remove('show');
                    }
                }, 10000);
            },
            
            // Calculate time ago string
            getTimeAgo(date) {
                const now = new Date();
                const diff = now - date;
                const minutes = Math.floor(diff / 60000);
                const hours = Math.floor(diff / 3600000);
                const days = Math.floor(diff / 86400000);
                
                if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;
                if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
                if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
                return 'just now';
            },
            
            // Start new analysis (clear restored state)
            startNew() {
                // Reset state
                StateManager.reset();
                
                // Hide results, show upload
                document.getElementById('resultsSection').style.display = 'none';
                document.getElementById('stateActions').style.display = 'none';
                
                // Reset UI elements
                document.getElementById('fileList').innerHTML = '';
                document.getElementById('analyzeBtn').disabled = true;
                document.getElementById('validationBadge').textContent = 'ANALYSIS PENDING';
                document.getElementById('validationBadge').className = 'meta-badge';
                
                // Hide recovery banner
                document.getElementById('recoveryBanner').classList.remove('show');
                
                // Clear any validation alerts
                const alert = document.getElementById('validationAlert');
                alert.classList.remove('show');
                
                console.log('🆕 Started new analysis session');
            }
        };

        // ========================================
        // ORIGINAL APPLICATION CODE (UPDATED)
        // ========================================
        
        // Initialize state manager on load
        StateManager.init();
        
        // Try to recover previous session
        document.addEventListener('DOMContentLoaded', () => {
            const recovered = RecoveryManager.init();
            if (recovered) {
                console.log('📊 Previous analysis restored automatically');
            }
        });

        // Recovery banner event listeners
        document.getElementById('startNewBtn').addEventListener('click', () => {
            RecoveryManager.startNew();
        });

        document.getElementById('closeBannerBtn').addEventListener('click', () => {
            document.getElementById('recoveryBanner').classList.remove('show');
        });

        // State action buttons
        document.getElementById('exportStateBtn').addEventListener('click', () => {
            PersistenceManager.export();
        });

        document.getElementById('clearStateBtn').addEventListener('click', () => {
            if (confirm('Are you sure you want to clear all saved data? This cannot be undone.')) {
                StateManager.reset();
                RecoveryManager.startNew();
            }
        });

        // Settings Modal Functions (Updated to use StateManager)
        function openSettingsModal() {
            const modal = document.getElementById('settingsModal');
            modal.classList.add('show');
            
            const rules = StateManager.getState('config.paymentRules');
            
            document.getElementById('weekdayRate').value = rules.weekdayRate.toFixed(2);
            document.getElementById('saturdayRate').value = rules.saturdayRate.toFixed(2);
            document.getElementById('unloadingBonus').value = rules.unloadingBonus.toFixed(2);
            document.getElementById('attendanceBonus').value = rules.attendanceBonus.toFixed(2);
            document.getElementById('earlyBonus').value = rules.earlyBonus.toFixed(2);
            
            StateManager.updateState('ui.currentModal', 'settings');
        }

        function closeSettingsModal() {
            const modal = document.getElementById('settingsModal');
            modal.classList.remove('show');
            StateManager.updateState('ui.currentModal', null);
        }

        function savePaymentRules() {
            const newRules = {
                weekdayRate: parseFloat(document.getElementById('weekdayRate').value) || 0,
                saturdayRate: parseFloat(document.getElementById('saturdayRate').value) || 0,
                unloadingBonus: parseFloat(document.getElementById('unloadingBonus').value) || 0,
                attendanceBonus: parseFloat(document.getElementById('attendanceBonus').value) || 0,
                earlyBonus: parseFloat(document.getElementById('earlyBonus').value) || 0
            };
            
            StateManager.updateState('config.paymentRules', newRules);
            
            console.log('💾 Payment rules updated:', newRules);
            
            showValidationAlert('Payment rules updated successfully. Re-analyze files to apply changes.', 'success');
            
            closeSettingsModal();
            
            if (StateManager.getState('ui.resultsVisible')) {
                setTimeout(() => {
                    if (confirm('Payment rules have been updated. Would you like to re-analyze with the new rules?')) {
                        analyzeFiles();
                    }
                }, 500);
            }
        }

        function resetPaymentRules() {
            const defaultRules = {
                weekdayRate: 2.00,
                saturdayRate: 3.00,
                unloadingBonus: 30.00,
                attendanceBonus: 25.00,
                earlyBonus: 50.00
            };
            
            document.getElementById('weekdayRate').value = defaultRules.weekdayRate.toFixed(2);
            document.getElementById('saturdayRate').value = defaultRules.saturdayRate.toFixed(2);
            document.getElementById('unloadingBonus').value = defaultRules.unloadingBonus.toFixed(2);
            document.getElementById('attendanceBonus').value = defaultRules.attendanceBonus.toFixed(2);
            document.getElementById('earlyBonus').value = defaultRules.earlyBonus.toFixed(2);
            
            console.log('🔄 Payment rules reset to defaults');
        }

        // Event listeners
        document.getElementById('fileInput').addEventListener('change', handleFileSelect);
        document.getElementById('uploadArea').addEventListener('click', () => {
            document.getElementById('fileInput').click();
        });
        document.getElementById('analyzeBtn').addEventListener('click', analyzeFiles);
        
        // Print button event listener
        document.getElementById('printBtn').addEventListener('click', function() {
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            
            if (isMobile) {
                const originalText = this.innerHTML;
                this.innerHTML = '<span class="print-btn-icon">📄</span><span>Preparing Full Page...</span>';
                this.disabled = true;
                
                setTimeout(() => {
                    window.print();
                    this.innerHTML = originalText;
                    this.disabled = false;
                    
                    setTimeout(() => {
                        this.innerHTML = '<span class="print-btn-icon">✓</span><span>Ready to Print!</span>';
                        setTimeout(() => {
                            this.innerHTML = originalText;
                        }, 2000);
                    }, 500);
                }, 500);
            } else {
                window.print();
            }
        });
        
        // Settings modal event listeners
        document.getElementById('settingsBtn').addEventListener('click', openSettingsModal);
        document.getElementById('closeModal').addEventListener('click', closeSettingsModal);
        document.getElementById('saveRules').addEventListener('click', savePaymentRules);
        document.getElementById('resetRules').addEventListener('click', resetPaymentRules);
        
        // Close modal when clicking outside
        document.getElementById('settingsModal').addEventListener('click', (e) => {
            if (e.target === document.getElementById('settingsModal')) {
                closeSettingsModal();
            }
        });
        
        // Allow Enter key to save in settings modal
        document.querySelectorAll('#settingsModal input').forEach(input => {
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    savePaymentRules();
                }
            });
        });

        // File handling functions (Updated to use StateManager)
        function handleFileSelect(event) {
            const files = Array.from(event.target.files);
            const uploadedFiles = [];
            
            files.forEach(file => {
                uploadedFiles.push({
                    id: Date.now() + Math.random(),
                    file: file,
                    name: file.name,
                    type: detectFileType(file.name),
                    size: file.size
                });
            });
            
            StateManager.updateState('files.uploaded', uploadedFiles);
            updateFileList();
            document.getElementById('analyzeBtn').disabled = uploadedFiles.length === 0;
        }

        function detectFileType(filename) {
            const name = filename.toLowerCase();
            if (name.includes('runsheet') || name.includes('dv_')) return 'runsheet';
            if (name.includes('self') || name.includes('invoice') || name.includes('bill')) return 'invoice';
            return 'unknown';
        }

        function updateFileList() {
            const fileList = document.getElementById('fileList');
            const uploadedFiles = StateManager.getState('files.uploaded');
            fileList.innerHTML = '';
            
            uploadedFiles.forEach(file => {
                const div = document.createElement('div');
                div.className = 'file-item';
                
                const fileInfo = document.createElement('div');
                fileInfo.className = 'file-info';
                
                const fileIcon = document.createElement('div');
                fileIcon.className = 'file-icon';
                fileIcon.textContent = '📄';
                
                const fileDetails = document.createElement('div');
                fileDetails.className = 'file-details';
                
                const fileName = document.createElement('div');
                fileName.className = 'file-name';
                fileName.textContent = file.name;
                
                const fileMeta = document.createElement('div');
                fileMeta.className = 'file-meta';
                fileMeta.textContent = `${file.type} • ${(file.size / 1024).toFixed(1)}KB`;
                
                fileDetails.appendChild(fileName);
                fileDetails.appendChild(fileMeta);
                fileInfo.appendChild(fileIcon);
                fileInfo.appendChild(fileDetails);
                
                const removeBtn = document.createElement('button');
                removeBtn.className = 'remove-btn';
                removeBtn.textContent = 'Remove';
                removeBtn.onclick = () => removeFile(file.id);
                
                div.appendChild(fileInfo);
                div.appendChild(removeBtn);
                fileList.appendChild(div);
            });
        }

        function removeFile(fileId) {
            const uploadedFiles = StateManager.getState('files.uploaded');
            const filtered = uploadedFiles.filter(f => f.id !== fileId);
            StateManager.updateState('files.uploaded', filtered);
            updateFileList();
            document.getElementById('analyzeBtn').disabled = filtered.length === 0;
        }

        // PDF extraction functions (unchanged)
        

        

        

        

        

        function showValidationAlert(message, type = 'warning') {
            const alert = document.getElementById('validationAlert');
            const messageElement = document.getElementById('validationMessage');
            const badge = document.getElementById('validationBadge');
            
            messageElement.textContent = message;
            alert.className = 'validation-alert show';
            
            if (type === 'error') {
                alert.classList.add('error');
                badge.textContent = 'VALIDATION FAILED';
                badge.className = 'meta-badge invalid';
            } else if (type === 'success') {
                alert.classList.add('success');
                badge.textContent = 'VALIDATED ANALYSIS';
                badge.className = 'meta-badge validated';
            } else {
                badge.textContent = 'ANALYSIS WARNING';
                badge.className = 'meta-badge';
            }
            
            // Update state
            StateManager.updateState('analysis.validation.status', type === 'success' ? true : type === 'error' ? false : null);
        }

        function hideValidationAlert() {
            const alert = document.getElementById('validationAlert');
            alert.classList.remove('show');
        }

        // Main analysis function (Updated to use StateManager)
        async function analyzeFiles() {
            const uploadedFiles = StateManager.getState('files.uploaded');
            if (uploadedFiles.length === 0) return;
            
            const loadingOverlay = document.getElementById('loadingOverlay');
            loadingOverlay.style.display = 'flex';
            StateManager.updateState('ui.isLoading', true);
            
            hideValidationAlert();
            
            const badge = document.getElementById('validationBadge');
            badge.textContent = 'PROCESSING...';
            badge.className = 'meta-badge';
            
            try {
                const runsheetData = {};
                let invoiceData = {};
                let pickupsData = {};
                let validationStatus = null;
                
                for (let i = 0; i < uploadedFiles.length; i++) {
                    const file = uploadedFiles[i];
                    const percent = ((i + 1) / uploadedFiles.length) * 100;
                    document.getElementById('progressBar').style.width = percent + '%';
                    StateManager.updateState('ui.loadingProgress', percent);
                    
                    const text = await extractTextFromPDF(file.file);
                    
                    if (file.type === 'runsheet') {
                        const date = extractDateFromRunsheet(text);
                        if (date) {
                            const consignments = extractConsignmentsFromRunsheet(text);
                            runsheetData[date] = { consignments };
                            console.log(`✅ Runsheet ${file.name}:`);
                            console.log(`   Date: ${date}`);
                            console.log(`   Total consignments: ${consignments}`);
                        } else {
                            console.error(`❌ Runsheet without valid date: ${file.name}`);
                        }
                    } else if (file.type === 'invoice') {
                        console.log(`\n📄 Processing Invoice: ${file.name}`);
                        const amounts = extractInvoiceAmounts(text);
                        
                        validationStatus = amounts._validationPassed;
                        const documentTotal = amounts._documentTotal;
                        const extractedTotal = amounts._extractedTotal;
                        const extractedPickups = amounts._pickups || {};
                        
                        Object.entries(extractedPickups).forEach(([date, pickup]) => {
                            if (!pickupsData[date]) {
                                pickupsData[date] = { count: 0, total: 0 };
                            }
                            pickupsData[date].count += pickup.count;
                            pickupsData[date].total += pickup.total;
                        });
                        
                        delete amounts._validationPassed;
                        delete amounts._documentTotal;
                        delete amounts._extractedTotal;
                        delete amounts._pickups;
                        
                        invoiceData = { ...invoiceData, ...amounts };
                        console.log(`✅ Invoice processed with ${Object.keys(amounts).length} days`);
                        
                        if (Object.keys(extractedPickups).length > 0) {
                            console.log(`  Found ${Object.keys(extractedPickups).length} days with pickup services`);
                        }
                    }
                }
                
                // Save processed data to state
                StateManager.batchUpdate({
                    'files.processed.runsheets': runsheetData,
                    'files.processed.invoices': invoiceData,
                    'files.processed.pickups': pickupsData
                });
                
                const paymentRules = StateManager.getState('config.paymentRules');
                
                console.log('\n=== PAYMENT RULES APPLIED ===');
                console.log(`Weekday rate: £${paymentRules.weekdayRate.toFixed(2)} per consignment`);
                console.log(`Saturday rate: £${paymentRules.saturdayRate.toFixed(2)} per consignment`);
                console.log(`Unloading bonus: £${paymentRules.unloadingBonus.toFixed(2)}/day (except Mondays)`);
                console.log(`Attendance bonus: £${paymentRules.attendanceBonus.toFixed(2)}/day (weekdays only)`);
                console.log(`Early arrival bonus: £${paymentRules.earlyBonus.toFixed(2)}/day (weekdays only)`);
                console.log('Pickup services: Paid as per invoice');
                
                console.log('\n=== EXTRACTION SUMMARY ===');
                console.log('Processed runsheets:');
                Object.entries(runsheetData).forEach(([date, data]) => {
                    console.log(`  ${date}: ${data.consignments} consignments`);
                });
                console.log('\nInvoice - values per day:');
                Object.entries(invoiceData).forEach(([date, amount]) => {
                    console.log(`  ${date}: £${amount.toFixed(2)}`);
                });
                console.log('\nPickup services extracted:');
                if (pickupsData && Object.keys(pickupsData).length > 0) {
                    Object.entries(pickupsData).forEach(([date, pickup]) => {
                        console.log(`  ${date}: ${pickup.count} pickup(s) = £${pickup.total.toFixed(2)}`);
                    });
                } else {
                    console.log('  No pickup services found');
                }
                console.log('========================\n');
                
                const results = [];
                let totals = {
                    expectedTotal: 0,
                    paidTotal: 0,
                    totalConsignments: 0,
                    differenceTotal: 0,
                    baseTotal: 0,
                    bonusTotal: 0,
                    unloadingTotal: 0,
                    attendanceTotal: 0,
                    earlyTotal: 0,
                    pickupTotal: 0,
                    pickupCount: 0,
                    workingDays: 0
                };
                
                const allDates = Array.from(
                    new Set([
                        ...Object.keys(runsheetData),
                        ...Object.keys(invoiceData)
                    ])
                ).sort();
                
                allDates.forEach(date => {
                    const dateObj = new Date(date + 'T12:00:00');
                    const dayOfWeek = dateObj.getDay();
                    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                    const isSaturday = dayOfWeek === 6;
                    
                    const consignments = runsheetData[date]?.consignments || 0;
                    const rate = isSaturday ? paymentRules.saturdayRate : paymentRules.weekdayRate;
                    const isMonday = dayOfWeek === 1;
                    
                    const pickupInfo = pickupsData[date] || { count: 0, total: 0 };
                    
                    let expectedTotal = 0;
                    let basePayment = 0;
                    let unloadingBonus = 0;
                    let attendanceBonus = 0;
                    let earlyBonus = 0;
                    
                    if (consignments > 0 || pickupInfo.total > 0) {
                        if (consignments > 0) {
                            basePayment = consignments * rate;
                            unloadingBonus = isMonday ? 0 : paymentRules.unloadingBonus;
                            attendanceBonus = isSaturday ? 0 : paymentRules.attendanceBonus;
                            earlyBonus = isSaturday ? 0 : paymentRules.earlyBonus;
                            totals.workingDays++;
                            
                            if (isMonday && consignments > 0) {
                                console.log(`  📅 ${date} (Monday): No unloading bonus applied`);
                            }
                        }
                        expectedTotal = basePayment + unloadingBonus + attendanceBonus + earlyBonus;
                    }
                    
                    expectedTotal += pickupInfo.total;
                    
                    const paidAmount = invoiceData[date] || 0;
                    const difference = paidAmount - expectedTotal;
                    
                    results.push({
                        date,
                        day: dayNames[dayOfWeek],
                        consignments,
                        rate,
                        basePayment,
                        unloadingBonus,
                        attendanceBonus,
                        earlyBonus,
                        totalBonus: unloadingBonus + attendanceBonus + earlyBonus,
                        pickupCount: pickupInfo.count,
                        pickupTotal: pickupInfo.total,
                        expectedTotal,
                        paidAmount,
                        difference
                    });
                    
                    totals.expectedTotal += expectedTotal;
                    totals.paidTotal += paidAmount;
                    totals.totalConsignments += consignments;
                    totals.differenceTotal += difference;
                    totals.baseTotal += basePayment;
                    totals.bonusTotal += unloadingBonus + attendanceBonus + earlyBonus;
                    totals.unloadingTotal += unloadingBonus;
                    totals.attendanceTotal += attendanceBonus;
                    totals.earlyTotal += earlyBonus;
                    totals.pickupTotal += pickupInfo.total;
                    totals.pickupCount += pickupInfo.count;
                });
                
                // Save analysis results to state
                StateManager.batchUpdate({
                    'analysis.results': results,
                    'analysis.totals': totals,
                    'analysis.validation.status': validationStatus,
                    'analysis.metadata.analysisDate': new Date().toISOString(),
                    'ui.resultsVisible': true
                });
                
                if (validationStatus === false) {
                    console.log('⚠️ Setting overall status to INVALID due to validation failure');
                }
                
                displayResults({ results, totals, runsheetData, validationStatus });
                
                // Show state actions after analysis
                document.getElementById('stateActions').style.display = 'flex';
                
            } catch (error) {
                console.error('Error:', error);
                alert('Error processing files: ' + error.message);
                showValidationAlert('Processing error: ' + error.message, 'error');
            } finally {
                loadingOverlay.style.display = 'none';
                StateManager.updateState('ui.isLoading', false);
            }
        }

        // Display results function (Updated to save metadata to state)
        function displayResults(data) {
            const { results, totals, runsheetData, validationStatus } = data;
            
            const runsheetDates = Object.keys(runsheetData || {}).sort();
            let periodRange = '-';
            
            if (runsheetDates.length > 0) {
                const startDate = new Date(runsheetDates[0] + 'T12:00:00');
                const endDate = new Date(runsheetDates[runsheetDates.length - 1] + 'T12:00:00');
                periodRange = `${startDate.toLocaleDateString('en-GB')} - ${endDate.toLocaleDateString('en-GB')}`;
            } else {
                const dates = results.map(r => r.date).sort();
                if (dates.length > 0) {
                    const startDate = new Date(dates[0] + 'T12:00:00');
                    const endDate = new Date(dates[dates.length - 1] + 'T12:00:00');
                    periodRange = `${startDate.toLocaleDateString('en-GB')} - ${endDate.toLocaleDateString('en-GB')}`;
                }
            }
            
            document.getElementById('periodRange').textContent = periodRange;
            document.getElementById('totalDays').textContent = totals.workingDays;
            document.getElementById('analysisDate').textContent = new Date().toLocaleDateString('en-GB');
            
            let overallStatusText = totals.differenceTotal >= 0 ? 'FAVORABLE' : 'UNFAVORABLE';
            if (validationStatus === false) {
                overallStatusText = 'INVALID - REVIEW REQUIRED';
            } else if (validationStatus === true) {
                overallStatusText = 'VALIDATED - ' + overallStatusText;
            }
            document.getElementById('overallStatus').textContent = overallStatusText;
            
            // Save metadata to state
            StateManager.batchUpdate({
                'analysis.metadata.periodRange': periodRange,
                'analysis.metadata.totalDays': totals.workingDays,
                'analysis.metadata.overallStatus': overallStatusText
            });
            
            // Update KPIs
            document.getElementById('totalExpected').textContent = `£${totals.expectedTotal.toFixed(2)}`;
            document.getElementById('totalPaid').textContent = `£${totals.paidTotal.toFixed(2)}`;
            document.getElementById('totalDifference').textContent = `£${Math.abs(totals.differenceTotal).toFixed(2)}`;
            document.getElementById('totalConsignments').textContent = totals.totalConsignments;
            
            const avgConsignments = totals.workingDays > 0 ? 
                Math.round(totals.totalConsignments / totals.workingDays) : 0;
            document.getElementById('avgConsignments').textContent = `Average: ${avgConsignments}/day`;
            
            document.getElementById('totalPickupValue').textContent = `£${totals.pickupTotal.toFixed(2)}`;
            document.getElementById('totalPickupCount').textContent = `${totals.pickupCount} service${totals.pickupCount !== 1 ? 's' : ''}`;
            
            const diffCard = document.getElementById('differenceCard');
            const diffStatus = document.getElementById('differenceStatus');
            if (totals.differenceTotal >= 0) {
                diffCard.classList.add('success');
                diffCard.classList.remove('danger');
                diffStatus.innerHTML = '<span>✓ Positive balance</span>';
            } else {
                diffCard.classList.add('danger');
                diffCard.classList.remove('success');
                diffStatus.innerHTML = '<span>✗ Negative balance</span>';
            }
            
            // Update table
            const tbody = document.getElementById('resultsTableBody');
            tbody.innerHTML = '';
            
            results.sort((a, b) => new Date(a.date) - new Date(b.date));
            
            results.forEach(row => {
                const tr = document.createElement('tr');
                let status;
                if (row.difference >= 0) {
                    status = '<span class="badge badge-success">OK</span>';
                } else if (Math.abs(row.difference) <= 5) {
                    status = '<span class="badge badge-warning">MINOR</span>';
                } else {
                    status = '<span class="badge badge-danger">REVIEW</span>';
                }
                
                let pickupDisplay = row.pickupTotal > 0 
                    ? `£${row.pickupTotal.toFixed(2)} (${row.pickupCount})` 
                    : '-';
                
                tr.innerHTML = `
                    <td class="cell-date">${row.date.split('-').reverse().join('/')}</td>
                    <td class="cell-day">${row.day}</td>
                    <td class="cell-number">${row.consignments || '-'}</td>
                    <td class="cell-currency">£${row.rate.toFixed(2)}</td>
                    <td class="cell-currency">£${row.basePayment.toFixed(2)}</td>
                    <td class="cell-currency">${pickupDisplay}</td>
                    <td class="cell-currency">£${row.totalBonus.toFixed(2)}</td>
                    <td class="cell-currency">£${row.expectedTotal.toFixed(2)}</td>
                    <td class="cell-currency">£${row.paidAmount.toFixed(2)}</td>
                    <td class="cell-currency ${row.difference >= 0 ? 'positive' : 'negative'}">
                        ${row.difference >= 0 ? '+' : ''}£${Math.abs(row.difference).toFixed(2)}
                    </td>
                    <td>${status}</td>
                `;
                tbody.appendChild(tr);
            });
            
            // Update footer
            document.getElementById('footerConsignments').textContent = totals.totalConsignments;
            document.getElementById('footerBase').textContent = `£${totals.baseTotal.toFixed(2)}`;
            document.getElementById('footerPickups').textContent = `£${totals.pickupTotal.toFixed(2)}`;
            document.getElementById('footerBonus').textContent = `£${totals.bonusTotal.toFixed(2)}`;
            document.getElementById('footerExpected').textContent = `£${totals.expectedTotal.toFixed(2)}`;
            document.getElementById('footerPaid').textContent = `£${totals.paidTotal.toFixed(2)}`;
            document.getElementById('footerDifference').textContent = 
                `${totals.differenceTotal >= 0 ? '+' : ''}£${Math.abs(totals.differenceTotal).toFixed(2)}`;
            
            // Update settlement breakdown
            document.getElementById('breakdownConsignments').textContent = `£${totals.baseTotal.toFixed(2)}`;
            document.getElementById('breakdownPickups').textContent = `£${totals.pickupTotal.toFixed(2)}`;
            document.getElementById('pickupCount').textContent = totals.pickupCount;
            document.getElementById('breakdownUnloading').textContent = `£${totals.unloadingTotal.toFixed(2)}`;
            document.getElementById('breakdownAttendance').textContent = `£${totals.attendanceTotal.toFixed(2)}`;
            document.getElementById('breakdownEarly').textContent = `£${totals.earlyTotal.toFixed(2)}`;
            document.getElementById('breakdownTotal').textContent = `£${totals.expectedTotal.toFixed(2)}`;
            
            const paymentRules = StateManager.getState('config.paymentRules');
            document.getElementById('unloadingRate').textContent = `£${paymentRules.unloadingBonus}`;
            document.getElementById('attendanceRate').textContent = `£${paymentRules.attendanceBonus}`;
            document.getElementById('earlyRate').textContent = `£${paymentRules.earlyBonus}`;
            
            // Update payment status
            const paymentStatus = document.getElementById('paymentStatus');
            const statusIcon = document.getElementById('statusIcon');
            const statusValue = document.getElementById('statusValue');
            
            if (totals.differenceTotal >= 0) {
                paymentStatus.classList.add('positive');
                statusIcon.textContent = '✓';
                statusValue.textContent = `+£${totals.differenceTotal.toFixed(2)}`;
            } else {
                paymentStatus.classList.remove('positive');
                statusIcon.textContent = '✗';
                statusValue.textContent = `-£${Math.abs(totals.differenceTotal).toFixed(2)}`;
            }
            
            document.getElementById('resultsSection').style.display = 'block';
            
            // Calculate print scale after rendering
            setTimeout(() => {
                const printScale = 0.95;
                StateManager.updateState('config.printScale', printScale);
                console.log('Print scale set to 0.95 for optimal readability');
            }, 100);
            
            // Scroll to results on mobile
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            if (isMobile) {
                document.getElementById('resultsSection').scrollIntoView({ behavior: 'smooth' });
                
                setTimeout(() => {
                    const printBtn = document.getElementById('printBtn');
                    printBtn.style.transform = 'scale(1.1)';
                    printBtn.style.boxShadow = '0 12px 36px rgba(15, 23, 42, 0.5)';
                    
                    setTimeout(() => {
                        printBtn.style.transform = '';
                        printBtn.style.boxShadow = '';
                    }, 1000);
                }, 1000);
            }
        }

        // Print event handlers
        window.addEventListener('beforeprint', function() {
            document.body.classList.add('printing');
            const printScale = StateManager.getState('config.printScale') || 0.95;
            document.querySelector('.document').style.width = '100%';
            document.querySelector('.document').style.maxWidth = '100%';
        });

        window.addEventListener('afterprint', function() {
            document.body.classList.remove('printing');
        });


// ---- UI namespace (non-breaking) ----
try {
  window.PA = window.PA || {};
  window.PA.ui = {
    openSettingsModal: openSettingsModal,
    closeSettingsModal: closeSettingsModal
  };
} catch (e) {}

// ---- Rules namespace (non-breaking) ----
try {
  window.PA = window.PA || {};
  window.PA.rules = Object.assign({}, window.PA.rules, {
    savePaymentRules: savePaymentRules,
    resetPaymentRules: resetPaymentRules
  });
} catch (e) {}

// ---- App/actions namespace (non-breaking) ----
try {
  window.PA = window.PA || {};
  window.PA.app = Object.assign({}, window.PA.app, {
    analyzeFiles: analyzeFiles,
    updateFileList: updateFileList,
    showValidationAlert: showValidationAlert
  });
} catch (e) {}

// ---- State & Rules getters (non-breaking) ----
try {
  window.PA = window.PA || {};
  // Read-only state snapshot helpers
  window.PA.state = Object.assign({}, window.PA.state, {
    snapshot: function() {
      try { return JSON.parse(JSON.stringify(StateManager.getState())); } catch(e) { return null; }
    },
    get: function(path) {
      try { return StateManager.getState(path); } catch(e) { return undefined; }
    }
  });
  // Rules helpers
  window.PA.rules = Object.assign({}, window.PA.rules, {
    current: function() {
      try {
        return StateManager.getState('config.paymentRules') || (typeof defaultRules !== 'undefined' ? defaultRules : null);
      } catch(e) { return null; }
    },
    defaults: function() {
      try { return (typeof defaultRules !== 'undefined') ? JSON.parse(JSON.stringify(defaultRules)) : null; } catch(e) { return null; }
    }
  });
} catch (e) { /* no-op */ }


// ---- Diagnostics & export (non-breaking) ----
try {
  window.PA = window.PA || {};

  // Version tag
  window.PA.version = '6.1.6-ns2';

  // Export helpers (manual use; no UI changes)
  function __pa_download(filename, text) {
    try {
      const a = document.createElement('a');
      a.href = URL.createObjectURL(new Blob([text], {type:'application/json'}));
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      setTimeout(() => {
        URL.revokeObjectURL(a.href);
        a.remove();
      }, 0);
      return true;
    } catch (e) { return false; }
  }

  window.PA.state = Object.assign({}, window.PA.state, {
    exportJson: function() {
      try {
        const data = (typeof StateManager !== 'undefined' && StateManager.getState) ? StateManager.getState() : null;
        if (!data) return false;
        return __pa_download('pa-state.json', JSON.stringify(data, null, 2));
      } catch (e) { return false; }
    }
  });

  window.PA.rules = Object.assign({}, window.PA.rules, {
    exportJson: function() {
      try {
        const current = (typeof StateManager !== 'undefined' && StateManager.getState) ? (StateManager.getState('config.paymentRules') || null) : null;
        if (!current && typeof defaultRules === 'undefined') return false;
        const out = current || defaultRules;
        return __pa_download('pa-rules.json', JSON.stringify(out, null, 2));
      } catch (e) { return false; }
    }
  });

  // Lightweight self-test (does not modify state)
  window.PA.selftest = function() {
    const res = {
      pdfjs: !!(window['pdfjsLib']),
      lz: !!(window['LZString']),
      dom: !!document.getElementById('fileInput'),
      stateMgr: !!(typeof StateManager !== 'undefined'),
      parserFns: !!(window.PA.parser && window.PA.parser.extractTextFromPDF),
      uiFns: !!(window.PA.ui && window.PA.ui.openSettingsModal),
      rulesFns: !!(window.PA.rules && (window.PA.rules.savePaymentRules || window.PA.rules.exportJson))
    };
    console.log('[PA:selftest]', res);
    return res;
  };
} catch (e) { /* no-op */ }


/* =======================
 * PA Ports & Boot (non-breaking)
 * ======================= */
try {
  window.PA = window.PA || {};

  // ---- Ports: Storage (localStorage + optional LZString) ----
  (function(){
    const hasLS = (function(){ try { const k='__pa_probe__'; localStorage.setItem(k,'1'); localStorage.removeItem(k); return true; } catch(e){ return false; } })();
    const hasLZ = typeof window.LZString !== 'undefined';
    function safeParse(s){ try { return JSON.parse(s); } catch(e){ return null; } }
    function safeStringify(o){ try { return JSON.stringify(o); } catch(e){ return null; } }
    function decompress(s){ try { return hasLZ ? window.LZString.decompressFromUTF16(s) : null; } catch(e){ return null; } }
    function compress(s){ try { return hasLZ ? window.LZString.compressToUTF16(s) : null; } catch(e){ return null; } }

    const storage = {
      ok: hasLS,
      getRaw: function(key){ try { return hasLS ? localStorage.getItem(key) : null; } catch(e){ return null; } },
      setRaw: function(key, val){ try { if(!hasLS) return false; localStorage.setItem(key, String(val)); return true; } catch(e){ return false; } },
      remove: function(key){ try { if(!hasLS) return false; localStorage.removeItem(key); return true; } catch(e){ return false; } },
      keys: function(){ try { if(!hasLS) return []; return Object.keys(localStorage); } catch(e){ return []; } },
      // JSON helpers
      getJSON: function(key){ const s=this.getRaw(key); return s ? safeParse(s) : null; },
      setJSON: function(key, obj){ const s = safeStringify(obj); return (s!=null) && this.setRaw(key, s); },
      // Compressed JSON (UTF-16)
      getCompressed: function(key){ const s=this.getRaw(key); const d = s ? decompress(s) : null; return d ? safeParse(d) : null; },
      setCompressed: function(key, obj){ const s = safeStringify(obj); if (s==null) return false; const c = compress(s); if (c==null) return false; return this.setRaw(key, c); }
    };

    window.PA.ports = window.PA.ports || {};
    window.PA.ports.storage = storage;
  })();

  // ---- Ports: PDF (pdf.js wrapper) ----
  (function(){
    const pdf = {
      available: !!(window.pdfjsLib && window.pdfjsLib.getDocument),
      load: async function(arrayBuffer, opts){
        if (!this.available) throw new Error('pdfjsLib not available');
        const data = arrayBuffer instanceof Uint8Array ? arrayBuffer : new Uint8Array(arrayBuffer);
        const task = window.pdfjsLib.getDocument(Object.assign({ data }, opts||{}));
        const doc = await task.promise;
        return doc;
      }
    };
    window.PA.ports = window.PA.ports || {};
    window.PA.ports.pdf = pdf;
  })();

  // ---- Ports: Clock & Logger ----
  (function(){
    const clock = {
      now: function(){ return Date.now(); },
      iso: function(){ return new Date().toISOString(); },
      fmt: function(d){ try { return (d instanceof Date ? d : new Date(d)).toLocaleString(); } catch(e){ return String(d); } }
    };
    const logger = {
      log: function(){ try { console.log('[PA]', ...arguments); } catch(e){} },
      warn: function(){ try { console.warn('[PA]', ...arguments); } catch(e){} },
      error: function(){ try { console.error('[PA]', ...arguments); } catch(e){} }
    };
    window.PA.ports = window.PA.ports || {};
    window.PA.ports.clock = clock;
    window.PA.ports.logger = logger;
  })();

  // ---- App boot shim (safe, read-only) ----
  (function(){
    const boot = function(){
      try {
        const state = {
          domReady: document.readyState === 'interactive' || document.readyState === 'complete',
          upload: !!document.getElementById('fileInput'),
          analyzeBtn: !!document.querySelector('.analyze-btn'),
          settingsBtn: !!document.querySelector('.settings-btn'),
          pdfjs: !!(window.pdfjsLib && window.pdfjsLib.getDocument),
          lz: !!window.LZString
        };
        // No side-effects; just report readiness
        return state;
      } catch (e) {
        return { error: e.message || String(e) };
      }
    };
    window.PA.app = Object.assign({}, window.PA.app, { boot });
  })();

} catch (e) { /* no-op */ }


/* =======================
 * PA Migrations: mirror rules save → ports.storage (non-breaking)
 * + lightweight test helpers
 * ======================= */
try {
  window.PA = window.PA || {};
  // --- Mirror writes on save/reset to ports.storage (keep original behavior) ---
  (function(){
    const ports = (window.PA.ports && window.PA.ports.storage) ? window.PA.ports.storage : null;
    if (!ports) return;
    // capture originals if present
    const __origSave = (typeof window.savePaymentRules === 'function') ? window.savePaymentRules : null;
    const __origReset = (typeof window.resetPaymentRules === 'function') ? window.resetPaymentRules : null;

    function __mirrorWrite() {
      try {
        // Prefer state rules if available; fallback to defaults
        const rules = (typeof StateManager !== 'undefined' && StateManager.getState)
          ? (StateManager.getState('config.paymentRules') || (typeof defaultRules !== 'undefined' ? defaultRules : null))
          : (typeof defaultRules !== 'undefined' ? defaultRules : null);
        if (rules) {
          // Use compressed store; key mirrors existing naming
          ports.setCompressed('pa_rules_v6', rules);
        }
      } catch (e) {
        (window.PA.ports && window.PA.ports.logger && PA.ports.logger.warn('mirrorWrite rules failed:', e));
      }
    }

    if (__origSave) {
      window.savePaymentRules = function(){
        const r = __origSave.apply(this, arguments);
        __mirrorWrite();
        return r;
      };
    }
    if (__origReset) {
      window.resetPaymentRules = function(){
        const r = __origReset.apply(this, arguments);
        __mirrorWrite();
        return r;
      };
    }
  })();

  // --- Tests helpers (no state mutation) ---
  (function(){
    const tests = {
      _approxEqual(a,b,tol){ tol = (typeof tol==='number')? tol : 0.01; return Math.abs((a||0)-(b||0)) <= tol; },
      checkInvoiceTotalsFromText(text, expected, tol){
        try {
          if (!text || typeof text !== 'string') return { ok:false, reason:'no text' };
          // Prefer parser hook if available
          let got = null;
          try {
            if (window.PA && PA.parser && typeof PA.parser.extractDocumentTotal === 'function') {
              got = PA.parser.extractDocumentTotal(text);
            }
          } catch(e){ /* ignore */ }
          // Fallback: regex capture the final GBP amount
          if (got == null) {
            const m = text.match(/(?:GBP|Total:|Docket Total:)[^\d]*(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)/i);
            got = m ? parseFloat(m[1].replace(/,/g,'')) : null;
          }
          if (got == null) return { ok:false, reason:'no total found' };
          const ok = tests._approxEqual(got, expected, (typeof tol==='number'?tol:0.01));
          return { ok, got, expected };
        } catch (e) {
          return { ok:false, error: String(e) };
        }
      }
    };
    window.PA.tests = Object.assign({}, window.PA.tests, tests);
  })();

} catch (e) { /* no-op */ }


/* =======================
 * PA Migrations: opt-in rules import from mirrored store (non-breaking)
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    function rulesFromPorts(){
      try {
        if (!window.PA || !PA.ports || !PA.ports.storage) return { ok:false, reason:'no ports.storage' };
        const mirrored = PA.ports.storage.getCompressed('pa_rules_v6');
        if (!mirrored) return { ok:false, reason:'no mirrored rules' };
        // Update state if StateManager is present
        if (typeof StateManager !== 'undefined' && typeof StateManager.updateState === 'function') {
          StateManager.updateState('config.paymentRules', mirrored);
        }
        // Try to reflect into UI form if fields exist (best-effort; ignore errors)
        try {
          const map = {
            weekdayRate: '#weekdayRate',
            saturdayRate: '#saturdayRate',
            sundayRate: '#sundayRate',
            extraDrop: '#extraDrop',
            fuelSurcharge: '#fuelSurcharge',
            incentivePerDay: '#incentivePerDay'
          };
          Object.keys(map).forEach(function(k){
            const sel = map[k], el = document.querySelector(sel);
            if (el && mirrored && (k in mirrored)) el.value = mirrored[k];
          });
        } catch(e){ /* ignore */ }
        return { ok:true, imported:true, keys:Object.keys(mirrored||{}) };
      } catch (e) {
        return { ok:false, error: String(e) };
      }
    }
    window.PA.migrate = Object.assign({}, window.PA.migrate, { rulesFromPorts });
  })();
} catch (e) { /* no-op */ }


/* =======================
 * PA Migrations: Prefer mirrored rules when primary empty (safe auto-recovery)
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    let _imported = false;
    async function autoRulesRecovery(){
      try {
        // Only run once
        if (_imported) return { ok:true, already:true };
        const hasStateMgr = (typeof StateManager !== 'undefined' && typeof StateManager.getState === 'function');
        if (!hasStateMgr) return { ok:false, reason:'no StateManager' };
        const current = StateManager.getState('config.paymentRules');
        // Heuristic: "empty" if missing or not an object with weekdayRate
        const empty = !current || typeof current !== 'object' || !('weekdayRate' in current);
        if (!empty) return { ok:true, skipped:true };
        // Try mirrored store
        if (!(window.PA && PA.ports && PA.ports.storage)) return { ok:false, reason:'no ports.storage' };
        const mirrored = PA.ports.storage.getCompressed('pa_rules_v6');
        if (!mirrored || typeof mirrored !== 'object') return { ok:true, skipped:true, reason:'no mirrored rules' };
        // Update state
        if (typeof StateManager.updateState === 'function') {
          StateManager.updateState('config.paymentRules', mirrored);
        }
        // Best-effort reflect into form (do not error if fields absent)
        try {
          const map = {
            weekdayRate: '#weekdayRate',
            saturdayRate: '#saturdayRate',
            sundayRate: '#sundayRate',
            extraDrop: '#extraDrop',
            fuelSurcharge: '#fuelSurcharge',
            incentivePerDay: '#incentivePerDay'
          };
          Object.keys(map).forEach(function(k){
            const sel = map[k], el = document.querySelector(sel);
            if (el && mirrored && (k in mirrored)) el.value = mirrored[k];
          });
        } catch(e){}
        _imported = true;
        return { ok:true, imported:true, keys:Object.keys(mirrored||{}) };
      } catch (e) {
        return { ok:false, error:String(e) };
      }
    }
    // expose + schedule (idle or after DOM)
    window.PA.migrate = Object.assign({}, window.PA.migrate, { autoRulesRecovery });
    const schedule = window.requestIdleCallback || function(fn){ return setTimeout(fn, 120); };
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      schedule(function(){ autoRulesRecovery(); });
    } else {
      document.addEventListener('DOMContentLoaded', function(){ schedule(function(){ autoRulesRecovery(); }); });
    }
  })();
} catch (e) { /* no-op */ }


/* =======================
 * Bridges R1/P1/U1/A1 (non-breaking)
 * ======================= */
try {
  window.PA = window.PA || {};

  /* R1 — Rules API (wrappers, no rewiring yet) */
  (function(){
    const ports = (window.PA.ports && window.PA.ports.storage) ? window.PA.ports.storage : null;
    const hasState = (typeof StateManager !== 'undefined' && typeof StateManager.getState === 'function');
    const hasUpdate = (typeof StateManager !== 'undefined' && typeof StateManager.updateState === 'function');

    function _readRawRules(){
      let cur = null;
      if (hasState) {
        try { cur = StateManager.getState('config.paymentRules') || null; } catch(e){ cur = null; }
      }
      if (!cur || typeof cur!=='object' || !('weekdayRate' in cur)) {
        // try mirrored store
        try { cur = ports ? ports.getCompressed('pa_rules_v6') || null : cur; } catch(e){}
      }
      if (!cur && typeof defaultRules !== 'undefined') cur = defaultRules;
      return cur || null;
    }

    function load(){ return _readRawRules(); }

    function save(partial){
      // delegate to existing savePaymentRules if available; otherwise patch state directly
      if (typeof window.savePaymentRules === 'function') {
        const r = window.savePaymentRules();
        return r === undefined ? true : r;
      } else if (hasUpdate) {
        const current = _readRawRules() || {};
        const next = Object.assign({}, current, (partial && typeof partial==='object') ? partial : {});
        try { StateManager.updateState('config.paymentRules', next); } catch(e){}
        try { ports && ports.setCompressed('pa_rules_v6', next); } catch(e){}
        return true;
      }
      return false;
    }

    function reset(){
      if (typeof window.resetPaymentRules === 'function') {
        const r = window.resetPaymentRules();
        return r === undefined ? true : r;
      } else if (hasUpdate) {
        try {
          if (typeof defaultRules !== 'undefined') {
            StateManager.updateState('config.paymentRules', defaultRules);
            ports && ports.setCompressed('pa_rules_v6', defaultRules);
            return true;
          }
        } catch(e){}
      }
      return false;
    }

    // Expose under PA.rules
    window.PA.rules = Object.assign({}, window.PA.rules, { load, save, reset });

    // Backward compatibility: flip legacy names to use wrappers (only if defined)
    if (typeof window.loadPaymentRules === 'function') {
      const __origLoad = window.loadPaymentRules;
      window.loadPaymentRules = function(){ return load(); };
      // retain original for debugging
      window.loadPaymentRules.__orig = __origLoad;
    }
    if (typeof window.savePaymentRules === 'function') {
      const __origSave = window.savePaymentRules;
      window.savePaymentRules = function(){ return save(); };
      window.savePaymentRules.__orig = __origSave;
    }
    if (typeof window.resetPaymentRules === 'function') {
      const __origReset = window.resetPaymentRules;
      window.resetPaymentRules = function(){ return reset(); };
      window.resetPaymentRules.__orig = __origReset;
    }
  })();

  /* P1 — Parser aggregate (not wired yet) */
  (function(){
    async function parseDocuments(files, cfg){
      const res = { items: [], total: 0, errors: [] };
      if (!files || !files.length) return res;
      const toArray = (x)=> (Array.isArray(x)? x : (x instanceof FileList ? Array.from(x) : [x]));
      const arr = toArray(files).filter(Boolean);
      for (const f of arr) {
        try {
          const text = await (PA.parser && PA.parser.extractTextFromPDF ? PA.parser.extractTextFromPDF(f) : Promise.resolve(null));
          if (!text) { res.items.push({ name:f.name, error:'no text' }); continue; }
          let docTotal = null;
          try {
            if (PA.parser && typeof PA.parser.extractDocumentTotal === 'function') {
              docTotal = PA.parser.extractDocumentTotal(text);
            }
          } catch(e){}
          // If runsheet-like, try to extract consignment amounts too (optional)
          let invoiceAmounts = null;
          try {
            if (PA.parser && typeof PA.parser.extractInvoiceAmounts === 'function') {
              invoiceAmounts = PA.parser.extractInvoiceAmounts(text);
            }
          } catch(e){}
          if (typeof docTotal === 'number') res.total += docTotal;
          res.items.push({ name: f.name || 'file', total: docTotal, details: invoiceAmounts });
        } catch(err){
          res.errors.push({ name: f && f.name, error: String(err && err.message || err) });
        }
      }
      return res;
    }
    window.PA.parser = Object.assign({}, window.PA.parser, { parseDocuments });
  })();

  /* U1 — UI shims (delegate if present) */
  (function(){
    function bindUI(){ if (typeof window.bindUI === 'function') return window.bindUI(); if (typeof window.bindEventListeners === 'function') return window.bindEventListeners(); }
    function renderReport(model){ if (typeof window.renderReport === 'function') return window.renderReport(model); }
    window.PA.ui = Object.assign({}, window.PA.ui, { bindUI, renderReport });
  })();

  /* A1 — Ensure boot is called at DOM ready (boot is read-only) */
  (function(){
    function callBoot(){ try { if (window.PA && PA.app && typeof PA.app.boot === 'function') PA.app.boot(); } catch(e){} }
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(callBoot, 0);
    } else {
      document.addEventListener('DOMContentLoaded', callBoot);
    }
  })();

} catch (e) { /* no-op */ }


/* =======================
 * Shadow runner (non-invasive): optional parallel parse for parity checks.
 * SAFE: pure add, no event handlers, no overrides, valid syntax.
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    // Feature flags (read-only defaults; you can flip in console)
    window.PA.flags = Object.assign({ useAggregate:false, shadowCompare:true }, window.PA.flags || {});

    // Manual shadow analyze - does NOT touch UI or state
    async function shadowAnalyze(files){
      try {
        const input = files || (document.getElementById('fileInput') && document.getElementById('fileInput').files);
        if (!input || !input.length) return { ok:false, reason:'no files' };
        if (!(window.PA && PA.parser && typeof PA.parser.parseDocuments === 'function')) {
          return { ok:false, reason:'no aggregate parser' };
        }
        const cfg = (PA.rules && typeof PA.rules.current === 'function') ? PA.rules.current() : null;
        const res = await PA.parser.parseDocuments(input, cfg);

        // Best-effort read a UI total for comparison (non-fatal)
        let uiTotal = null;
        try {
          const tfootCell = document.querySelector('tfoot .cell-currency');
          if (tfootCell && tfootCell.textContent) {
            const m = tfootCell.textContent.replace(/[£,\s]/g,'').match(/(\d+(?:\.\d{2})?)$/);
            if (m) uiTotal = parseFloat(m[1]);
          } else {
            const el = Array.from(document.querySelectorAll('td,div,span'))
              .find(e => /Total:/i.test(e.textContent||'') && /GBP|£/.test(e.textContent||''));
            if (el && el.textContent) {
              const m2 = el.textContent.match(/(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)/);
              if (m2) uiTotal = parseFloat(m2[1].replace(/,/g,''));
            }
          }
        } catch(e){ /* ignore best-effort */ }

        const out = { ok:true, aggregate:res, uiTotal };
        console.log('[PA:shadowAnalyze]', out);
        return out;
      } catch (e) {
        return { ok:false, error:String(e) };
      }
    }

    window.PA.tests = Object.assign({}, window.PA.tests, { shadowAnalyze });
  })();
} catch (e) { /* no-op */ }


/* =======================
 * Backup & Version Tools (safe, no UX change)
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    function __download(name, data, type){
      try {
        const a = document.createElement('a');
        a.href = URL.createObjectURL(new Blob([data], {type: type || 'text/plain'}));
        a.download = name;
        document.body.appendChild(a);
        a.click();
        setTimeout(() => { URL.revokeObjectURL(a.href); a.remove(); }, 0);
        return true;
      } catch(e){ return false; }
    }

    function exportHTML(filename){
      try {
        const name = filename || ('payment-analyzer-backup-' + Date.now() + '.html');
        const doc = document.documentElement.outerHTML;
        return __download(name, doc, 'text/html');
      } catch(e){ return false; }
    }

    function saveBaselineTag(tag){
      try {
        localStorage.setItem('pa_last_good', String(tag || 'unknown'));
        return true;
      } catch(e){ return false; }
    }

    function backupToLocal(){
      try {
        const html = document.documentElement.outerHTML;
        if (window.LZString) {
          const c = LZString.compressToUTF16(html);
          localStorage.setItem('pa_html_backup_c', c);
        } else {
          localStorage.setItem('pa_html_backup', html);
        }
        return true;
      } catch(e){ return false; }
    }

    function restoreFromLocal(){
      try {
        let html = localStorage.getItem('pa_html_backup');
        if (!html && window.LZString) {
          const c = localStorage.getItem('pa_html_backup_c');
          if (c) html = LZString.decompressFromUTF16(c);
        }
        return !!html;
      } catch(e){ return false; }
    }

    window.PA.tools = Object.assign({}, window.PA.tools, {
      exportHTML, saveBaselineTag, backupToLocal, restoreFromLocal
    });
  })();
} catch (e) { /* no-op */ }


/* =======================
 * Analyze wiring behind flag (instant rollback). Non-breaking.
 * - Default: legacy flow.
 * - When PA.flags.useAggregate === true: run aggregate parse in background on click.
 * - Future toggle: PA.flags.aggregateDrivesUI to stop legacy and drive UI (not enabled by default).
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    // Ensure flags object
    window.PA.flags = Object.assign({ useAggregate:false, aggregateDrivesUI:false, shadowCompare:true }, window.PA.flags || {});

    function installAnalyzeGate(){
      try {
        const btn = document.getElementById('analyzeBtn');
        if (!btn) return false;
        // Capture original reference for rollback
        if (!window.PA.app) window.PA.app = {};
        if (!window.PA.app.__origAnalyze && typeof window.analyzeFiles === 'function') {
          window.PA.app.__origAnalyze = window.analyzeFiles;
        }
        // Capture-phase listener so we can optionally stop legacy
        function gateHandler(ev){
          try {
            const flags = window.PA.flags || {};
            // Shadow-only: run aggregate but allow legacy to proceed
            if (flags.useAggregate && !flags.aggregateDrivesUI) {
              if (window.PA && PA.parser && typeof PA.parser.parseDocuments === 'function') {
                const files = (document.getElementById('fileInput') && document.getElementById('fileInput').files) || null;
                if (files && files.length) {
                  const cfg = (PA.rules && typeof PA.rules.current === 'function') ? PA.rules.current() : null;
                  // fire-and-forget
                  Promise.resolve().then(() => PA.parser.parseDocuments(files, cfg))
                    .then(res => console.log('[PA:wiring][shadow]', res))
                    .catch(err => console.warn('[PA:wiring][shadow] error', err));
                }
              }
              return; // allow original handler to run
            }

            // (Disabled by default) Aggregate drives UI path with fallback
            if (flags.useAggregate && flags.aggregateDrivesUI) {
              ev.preventDefault();
              ev.stopImmediatePropagation();
              // If anything fails, call original
              const fallback = () => {
                try { window.PA.app.__origAnalyze && window.PA.app.__origAnalyze(); } catch(e){}
              };
              try {
                const files = (document.getElementById('fileInput') && document.getElementById('fileInput').files) || null;
                if (!files || !files.length) return fallback();
                if (!(window.PA && PA.parser && typeof PA.parser.parseDocuments === 'function')) return fallback();
                const cfg = (PA.rules && typeof PA.rules.current === 'function') ? PA.rules.current() : null;

                // Minimal UX parity: show loading like legacy, then call legacy to render after parse (safe)
                try {
                  const loadingOverlay = document.getElementById('loadingOverlay');
                  if (loadingOverlay) loadingOverlay.style.display = 'flex';
                } catch(e){}

                Promise.resolve()
                  .then(() => PA.parser.parseDocuments(files, cfg))
                  .then(res => {
                    console.log('[PA:wiring][aggregate]', res);
                    // For now, still delegate rendering to legacy to guarantee parity
                    fallback();
                  })
                  .catch(err => {
                    console.warn('[PA:wiring][aggregate] error', err);
                    fallback();
                  });
              } catch (e) {
                console.warn('[PA:wiring] gate error', e);
                fallback();
              }
            }
          } catch(e){ /* swallow to not break legacy */ }
        }
        // Avoid duplicates
        if (!btn.__paGateInstalled) {
          btn.addEventListener('click', gateHandler, true); // capture
          btn.__paGateInstalled = true;
        }
        return true;
      } catch(e){ return false; }
    }

    // Install after DOM ready
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(installAnalyzeGate, 0);
    } else {
      document.addEventListener('DOMContentLoaded', installAnalyzeGate);
    }
  })();
} catch (e) { /* no-op */ }


/* =======================
 * Aggregate→UI bridge behind flags (no default change).
 * Drives UI by capturing legacy displayResults; hard fallback.
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    function installAggregateUIBridge(){
      try {
        const btn = document.getElementById('analyzeBtn');
        if (!btn) return false;
        if (btn.__paAggregateBridge) return true;

        function handler(ev){
          try {
            const flags = window.PA && PA.flags ? PA.flags : {};
            if (!(flags.useAggregate && flags.aggregateDrivesUI)) return; // let legacy run normally

            // Prepare capture of legacy displayResults(model)
            const origDisplay = window.displayResults;
            let captured = null;
            let resolved = false;
            let resolvePromise = null;
            const done = new Promise(res => { resolvePromise = res; });

            window.displayResults = function(model){
              try { captured = model; } catch(e){}
              try { resolved = true; resolvePromise && resolvePromise(true); } catch(e){}
              // do NOT call original -> we will render via PA.ui
            };

            // Allow other click handlers (legacy) to run; do not preventDefault
            setTimeout(async function(){
              // Wait up to 12s for capture, then restore + render
              try {
                await Promise.race([done, new Promise((_,rej)=>setTimeout(()=>rej(new Error('timeout')), 12000))]);
              } catch(e){ /* timeout or error */ }
              // Restore original displayResults
              try {
                if (origDisplay) window.displayResults = origDisplay;
                else delete window.displayResults;
              } catch(e){}
              // Render using captured model; fallback to original if capture failed
              if (captured && window.PA && PA.ui && typeof PA.ui.renderReport === 'function') {
                try { PA.ui.renderReport(captured); } catch(e){ console.warn('[PA:bridge] render error', e); }
                try {
                  const sa = document.getElementById('stateActions');
                  if (sa) sa.style.display = 'flex';
                } catch(e){}
              } else {
                // Fallback: call original analyze (if we prevented anything, ensure UI)
                try {
                  if (window.PA && PA.app && typeof PA.app.__origAnalyze === 'function') {
                    PA.app.__origAnalyze();
                  } else if (typeof window.analyzeFiles === 'function') {
                    window.analyzeFiles();
                  }
                } catch(e){ console.warn('[PA:bridge] fallback analyze error', e); }
              }
            }, 0);
          } catch(e){ /* never break legacy */ }
        }

        btn.addEventListener('click', handler, true); // capture
        btn.__paAggregateBridge = true;
        return true;
      } catch(e){ return false; }
    }

    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(installAggregateUIBridge, 0);
    } else {
      document.addEventListener('DOMContentLoaded', installAggregateUIBridge);
    }
  })();
} catch (e) { /* no-op */ }


/* =======================
 * S2: Aggregate → Model adapter (behind flag, instant rollback)
 * - Decorates PA.parser.parseDocuments to stash last result (non-breaking)
 * - Adds PA.app.aggregateToModel(agg, rules, seed) → tries to build legacy model shape
 * - Bridge uses adapter only if aggregateModelFromParse=true and parity with captured model holds
 * ======================= */
try {
  window.PA = window.PA || {};

  (function decorateAggregate(){
    try {
      if (!window.PA.parser || typeof PA.parser.parseDocuments !== 'function') return;
      if (PA.parser.parseDocuments.__paDecorated) return;
      const __orig = PA.parser.parseDocuments;
      PA.parser.parseDocuments = async function(){
        const res = await __orig.apply(this, arguments);
        try {
          window.PA.app = window.PA.app || {};
          window.PA.app.__lastAggregate = { at: Date.now(), res };
        } catch(e){}
        return res;
      };
      PA.parser.parseDocuments.__paDecorated = true;
      PA.parser.parseDocuments.__orig = __orig;
    } catch(e){ /* noop */ }
  })();

  (function adapter(){
    function deepClone(o){ try { return JSON.parse(JSON.stringify(o)); } catch(e){ return null; } }
    function primaryTotalFrom(model){
      if (!model) return null;
      const t = model.totals || model.summary || null;
      const pick = (obj, keys) => {
        for (let k of keys) {
          if (obj && typeof obj[k] === 'number' && isFinite(obj[k])) return obj[k];
        }
        return null;
      };
      let v = null;
      if (t) v = pick(t, ['invoiceTotal','grandTotal','totalDue','total','sum']);
      if (v==null) {
        // try top-level
        v = pick(model, ['invoiceTotal','grandTotal','totalDue','total','sum']);
      }
      return v;
    }

    function setPrimaryTotal(model, value){
      if (!model) return false;
      const ensure = (obj) => obj && typeof obj === 'object';
      const t = model.totals || (ensure(model.summary) ? model.summary : null);
      const keys = ['invoiceTotal','grandTotal','totalDue','total','sum'];
      const setOn = (obj) => {
        if (!ensure(obj)) return false;
        for (let k of keys) {
          if (typeof obj[k] === 'number') { obj[k] = value; return true; }
        }
        // if none existed, create a conservative field
        obj['invoiceTotal'] = value;
        return true;
      };
      if (t && setOn(t)) return true;
      return setOn(model);
    }

    function approx(a,b,tol){ tol = (typeof tol==='number' ? tol : 0.005); return Math.abs((a||0)-(b||0)) <= tol; }

    // Public adapter
    function aggregateToModel(agg, rules, seed){
      try {
        if (!agg || typeof agg.total !== 'number') return { ok:false, reason:'no aggregate total' };
        // Prefer to start from a seed model (captured legacy) to guarantee full shape
        const base = deepClone(seed) || {};
        if (!setPrimaryTotal(base, agg.total)) return { ok:false, reason:'cannot set total' };
        // Touch nothing else.
        return { ok:true, model: base, total: agg.total };
      } catch(e){
        return { ok:false, error: String(e) };
      }
    }

    window.PA.app = Object.assign({}, window.PA.app, { aggregateToModel });
  })();

  (function bridgeUseAdapter(){
    // Extend the aggregate→UI bridge to optionally use adapter result
    function enable(){
      try {
        const btn = document.getElementById('analyzeBtn');
        if (!btn) return false;
        if (btn.__paAdapterHook) return true;
        const origHandler = function(ev){
          try {
            const flags = window.PA && PA.flags ? PA.flags : {};
            if (!(flags.useAggregate && flags.aggregateDrivesUI && flags.aggregateModelFromParse)) return;
            // Wait a bit for both capture (legacy model) and aggregate result to land
            setTimeout(function(){
              try {
                const cap = window.PA && PA.app && PA.app.__lastCapturedModel;
                const agg = window.PA && PA.app && PA.app.__lastAggregate && PA.app.__lastAggregate.res;
                if (!cap || !agg) return; // fall back to captured path in main bridge
                if (!(window.PA && PA.app && typeof PA.app.aggregateToModel === 'function')) return;
                const rules = (PA.rules && typeof PA.rules.current === 'function') ? PA.rules.current() : null;
                const out = PA.app.aggregateToModel(agg, rules, cap);
                if (out && out.ok && out.model) {
                  // Safety: parity check vs captured model
                  try {
                    const getTotal = function(m){
                      const t = (m && m.totals) ? m.totals : (m && m.summary ? m.summary : m);
                      if (!t) return null;
                      const keys = ['invoiceTotal','grandTotal','totalDue','total','sum'];
                      for (let k of keys) if (typeof t[k] === 'number') return t[k];
                      return null;
                    };
                    const tCap = getTotal(cap);
                    const tNew = getTotal(out.model);
                    if (tCap != null && tNew != null && Math.abs(tCap - tNew) <= 0.005) {
                      // Render via UI with adapter model
                      try {
                        if (window.PA && PA.ui && typeof PA.ui.renderReport === 'function') {
                          PA.ui.renderReport(out.model);
                          // Reveal state actions like legacy
                          const sa = document.getElementById('stateActions');
                          if (sa) sa.style.display = 'flex';
                        }
                      } catch(e){ console.warn('[PA:adapter] render error', e); }
                    }
                  } catch(e){}
                }
              } catch(e){}
            }, 50);
          } catch(e){}
        };
        btn.addEventListener('click', origHandler, true);
        btn.__paAdapterHook = true;
        return true;
      } catch(e){ return false; }
    }
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(enable, 0);
    } else {
      document.addEventListener('DOMContentLoaded', enable);
    }
  })();

  // Patch capture to stash model when main bridge overrides displayResults
  (function patchCaptureStash(){
    try {
      if (window.__paCapturePatched) return;
      const _origDefine = Object.defineProperty;
      Object.defineProperty = function(obj, prop, desc){
        try {
          if (obj === window && prop === 'displayResults' && desc && typeof desc.value === 'function') {
            const fn = desc.value;
            desc.value = function(model){
              try { window.PA = window.PA || {}; window.PA.app = window.PA.app || {}; window.PA.app.__lastCapturedModel = model; } catch(e){}
              return fn.apply(this, arguments);
            };
          }
        } catch(e){}
        return _origDefine.apply(this, arguments);
      };
      window.__paCapturePatched = true;
    } catch(e){ /* noop */ }
  })();

} catch (e) { /* no-op */ }


/* =======================
 * S3: Safe UI bind behind flag (no default change)
 * - Guarded PA.ui.bindUI() to run at most once
 * - Optional auto-bind when PA.flags.bindViaUI === true
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    var _bound = false;
    var _delegate = (typeof window.bindUI === 'function') ? window.bindUI
                   : (typeof window.bindEventListeners === 'function') ? window.bindEventListeners
                   : null;
    function safeBindUI(){
      if (_bound) return true;
      _bound = true;
      try { _delegate && _delegate(); } catch(e){ _bound = false; return false; }
      return true;
    }
    window.PA.ui = Object.assign({}, window.PA.ui, { bindUI: safeBindUI });
    // Optional auto-bind via flag
    window.PA.flags = Object.assign({ bindViaUI:false }, window.PA.flags || {});
    function maybeBind(){
      try { if (window.PA.flags && PA.flags.bindViaUI) safeBindUI(); } catch(e){}
    }
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(maybeBind, 0);
    } else {
      document.addEventListener('DOMContentLoaded', maybeBind);
    }
  })();
} catch (e) { /* no-op */ }


/* =======================
 * S4: Single-entry boot shim (idempotent, safe)
 * - Expose PA.app.bootOnce() and window.bootApp()
 * - Ensure first call at DOM ready; legacy can call again safely
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    window.PA.app = window.PA.app || {};
    var bootFn = (window.PA.app && typeof window.PA.app.boot === 'function') ? window.PA.app.boot : null;
    if (!bootFn) return;
    if (window.PA.app.bootOnce) return; // already installed

    var ran = false;
    window.PA.app.__bootResult = undefined;
    window.PA.app.__bootError = undefined;

    function bootOnce(){
      if (ran) return window.PA.app.__bootResult || true;
      ran = true;
      try {
        window.PA.app.__bootResult = bootFn();
      } catch (e) {
        window.PA.app.__bootError = e;
      }
      return window.PA.app.__bootResult;
    }

    window.PA.app.bootOnce = bootOnce;
    // Optional alias for legacy init paths
    window.bootApp = bootOnce;

    // Ensure it runs at DOM ready (without blocking legacy)
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(bootOnce, 0);
    } else {
      document.addEventListener('DOMContentLoaded', bootOnce, { once: true });
    }
  })();
} catch (e) { /* no-op */ }


/* =======================
 * S5: Flag persistence (safe, no UI change)
 * - Restores PA.flags from localStorage at boot
 * - Provides PA.flags.save() / reset()
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    var KEY = 'pa_flags_v1';
    function restore(){
      try {
        var raw = localStorage.getItem(KEY);
        if (!raw) return false;
        var obj = JSON.parse(raw);
        if (!obj || typeof obj !== 'object') return false;
        window.PA.flags = Object.assign({}, window.PA.flags || {}, obj);
        return true;
      } catch(e){ return false; }
    }
    function save(){
      try {
        var src = window.PA && PA.flags ? PA.flags : {};
        localStorage.setItem(KEY, JSON.stringify(src));
        return true;
      } catch(e){ return false; }
    }
    function reset(){
      try { localStorage.removeItem(KEY); return true; } catch(e){ return false; }
    }
    // attach API
    window.PA.flags = Object.assign({}, window.PA.flags || {}, { save: save, reset: reset });
    // restore soon after DOM ready
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(restore, 0);
    } else {
      document.addEventListener('DOMContentLoaded', restore, { once:true });
    }
  })();
} catch (e) { /* no-op */ }


/* =======================
 * S6: Adapter enrichment (counts/date-range scaffold) behind existing flags
 * - Extends PA.app.aggregateToModel to set count-like fields if present in seed
 * - Keeps strict parity on totals; never mutates unexpected keys
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    function deepClone(o){ try { return JSON.parse(JSON.stringify(o)); } catch(e){ return null; } }
    function setIfPathExists(obj, path, value){
      try {
        var cur = obj;
        for (var i=0;i<path.length-1;i++){
          var k = path[i];
          if (!cur || typeof cur[k] !== 'object') return false;
          cur = cur[k];
        }
        var last = path[path.length-1];
        if (!(last in cur)) return false; // set only if field exists
        cur[last] = value;
        return true;
      } catch(e){ return false; }
    }
    function findExistingKey(obj, paths){
      for (var i=0;i<paths.length;i++){
        var p = paths[i];
        var cur = obj;
        var ok = true;
        for (var j=0;j<p.length;j++){
          var k = p[j];
          if (j === p.length-1){
            if (!(k in cur)) { ok=false; break; }
          } else {
            if (!cur || typeof cur[k] !== 'object') { ok=false; break; }
            cur = cur[k];
          }
        }
        if (ok) return p;
      }
      return null;
    }
    function getPrimaryTotal(model){
      if (!model) return null;
      var candidates = [
        ['totals','invoiceTotal'], ['totals','grandTotal'], ['totals','totalDue'], ['totals','total'], ['totals','sum'],
        ['summary','invoiceTotal'], ['summary','grandTotal'], ['summary','totalDue'], ['summary','total'], ['summary','sum'],
        ['invoiceTotal'], ['grandTotal'], ['totalDue'], ['total'], ['sum']
      ];
      for (var i=0;i<candidates.length;i++){
        var p = candidates[i], cur=model, ok=true;
        for (var j=0;j<p.length;j++){
          var k = p[j];
          if (j===p.length-1){ if (typeof cur[k] !== 'number') ok=false; }
          else { if (!cur || typeof cur[k] !== 'object') { ok=false; break; } cur = cur[k]; }
        }
        if (ok) return p;
      }
      return null;
    }
    function setPrimaryTotal(model, value){
      var p = getPrimaryTotal(model);
      if (!p) return false;
      var cur = model;
      for (var i=0;i<p.length-1;i++) cur = cur[p[i]];
      cur[p[p.length-1]] = value;
      return true;
    }

    // Replace/extend existing adapter
    var prevAdapter = (window.PA.app && window.PA.app.aggregateToModel) ? window.PA.app.aggregateToModel : null;
    function aggregateToModelEnhanced(agg, rules, seed){
      try {
        if (!agg || typeof agg.total !== 'number') return { ok:false, reason:'no aggregate total' };
        var base = deepClone(seed) || {};
        // Ensure total parity update
        if (!setPrimaryTotal(base, agg.total)) return { ok:false, reason:'cannot set total' };

        // === Enrichments (only if target fields already exist in seed) ===
        var itemsCount = (agg.items && typeof agg.items.length === 'number') ? agg.items.length : null;

        // 1) number of dockets / files count
        var countPaths = [
          ['totals','numberOfDockets'], ['summary','numberOfDockets'],
          ['metadata','numberOfDockets'], ['kpis','numberOfDockets'],
          ['totals','docketCount'], ['summary','docketCount'], ['kpis','docketCount'],
          ['metadata','filesCount'], ['summary','filesCount'], ['kpis','filesCount'], ['totals','filesCount'],
          ['fileCount'], ['docketCount'], ['numberOfDockets']
        ];
        var existing = findExistingKey(base, countPaths);
        if (existing && itemsCount != null) {
          setIfPathExists(base, existing, itemsCount);
        }

        // 2) date range scaffold (only set if both fields exist already in seed)
        // We don't have dates in agg; keep seed values. Placeholder for future parse enrichment.
        // (No-op by design to avoid guesswork.)

        return { ok:true, model: base, total: agg.total, enriched: { itemsCountSet: !!existing } };
      } catch(e){
        return { ok:false, error:String(e) };
      }
    }

    window.PA.app = Object.assign({}, window.PA.app, { aggregateToModel: aggregateToModelEnhanced, __adapterPrev: prevAdapter });
    // Flag doc
    window.PA.flags = Object.assign({ aggregateModelFromParse: false }, window.PA.flags || {});
  })();
} catch (e) { /* no-op */ }


/* =======================
 * S7: Regression guard (shadow mode) — non-blocking banner + console
 * Active when PA.flags.useAggregate===true && PA.flags.shadowCompare===true
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    var TOL = 0.01; // £0.01 tolerance
    function getRenderedTotal(){
      try {
        // prefer captured model total if available
        var cap = window.PA && PA.app && PA.app.__lastCapturedModel;
        if (cap) {
          var t = (cap.totals || cap.summary || cap);
          var keys = ['invoiceTotal','grandTotal','totalDue','total','sum'];
          for (var i=0;i<keys.length;i++){ var k=keys[i]; if (t && typeof t[k]==='number') return t[k]; }
        }
      } catch(e){}
      try {
        var cell = document.querySelector('tfoot .cell-currency');
        if (cell && cell.textContent){
          var m = cell.textContent.replace(/[£,\s]/g,'').match(/(\d+(?:\.\d{2})?)$/);
          if (m) return parseFloat(m[1]);
        }
      } catch(e){}
      return null;
    }
    function showBanner(msg){
      try {
        var id = '__pa_regression_banner';
        var el = document.getElementById(id);
        if (!el){
          el = document.createElement('div');
          el.id = id;
          el.style.cssText = 'position:fixed;bottom:16px;left:50%;transform:translateX(-50%);'
            +'background:#b91c1c;color:#fff;padding:10px 16px;border-radius:12px;'
            +'box-shadow:0 8px 24px rgba(0,0,0,.25);font:600 12px/1.2 Inter,system-ui,sans-serif;z-index:9999;';
          var close = document.createElement('button');
          close.textContent = '×';
          close.style.cssText = 'margin-left:10px;background:rgba(255,255,255,.2);border:none;color:#fff;'
            +'width:22px;height:22px;border-radius:50%;cursor:pointer;font-weight:900;';
          close.onclick = function(){ el.remove(); };
          var span = document.createElement('span');
          span.id = id+'_txt';
          el.appendChild(span);
          el.appendChild(close);
          document.body.appendChild(el);
        }
        var txt = document.getElementById(id+'_txt');
        if (txt) txt.textContent = msg;
      } catch(e){}
    }
    function maybeCheck(){
      try {
        var flags = window.PA && PA.flags ? PA.flags : {};
        if (!(flags.useAggregate && flags.shadowCompare)) return;
        var agg = window.PA && PA.app && PA.app.__lastAggregate && PA.app.__lastAggregate.res;
        var ui = getRenderedTotal();
        if (!agg || typeof agg.total !== 'number' || ui == null) return;
        var diff = +(agg.total - ui).toFixed(2);
        if (Math.abs(diff) > TOL){
          var msg = 'Regression: aggregate £'+agg.total.toFixed(2)+' vs legacy £'+ui.toFixed(2)+' (Δ £'+diff.toFixed(2)+')';
          console.warn('[PA:regression]', { aggregate: agg.total, legacy: ui, diff: diff });
          showBanner(msg);
          try {
            // optional log to localStorage for later review
            var key='pa_regressions';
            var arr = JSON.parse(localStorage.getItem(key) || '[]');
            arr.push({ t: Date.now(), agg: agg.total, legacy: ui, diff: diff });
            localStorage.setItem(key, JSON.stringify(arr.slice(-50)));
          } catch(e){}
        }
      } catch(e){}
    }
    // Hook after analyze click; reuse existing button
    function install(){
      try {
        var btn = document.getElementById('analyzeBtn');
        if (!btn || btn.__paRegressInstalled) return false;
        btn.addEventListener('click', function(){ setTimeout(maybeCheck, 150); }, true);
        btn.__paRegressInstalled = true;
        return true;
      } catch(e){ return false; }
    }
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(install, 0);
    } else {
      document.addEventListener('DOMContentLoaded', install);
    }
    // Expose manual check
    window.PA.tests = Object.assign({}, window.PA.tests, { regressionCheck: maybeCheck });
  })();
} catch (e) { /* no-op */ }


/* =======================
 * S8 (ops): Tools button (flag-gated, default off)
 * - Shows a small floating menu: Export HTML, Backup to Local, Show Regressions
 * - Visible only when PA.flags.toolsButton === true
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    window.PA.flags = Object.assign({ toolsButton:false }, window.PA.flags || {});

    function ensureTools(){
      try {
        var flags = window.PA && PA.flags ? PA.flags : {};
        if (!flags.toolsButton) {
          var ex = document.getElementById('__pa_tools_btn');
          if (ex) ex.remove();
          return false;
        }
        if (document.getElementById('__pa_tools_btn')) return true;

        var wrap = document.createElement('div');
        wrap.id = '__pa_tools_btn';
        wrap.style.cssText = 'position:fixed;bottom:20px;left:20px;z-index:10000;display:flex;flex-direction:column;gap:8px;';
        function btn(label, onclick){
          var b = document.createElement('button');
          b.textContent = label;
          b.style.cssText = 'background:#0f172a;color:#fff;border:none;border-radius:14px;padding:10px 14px;font-size:12px;font-weight:700;box-shadow:0 6px 16px rgba(0,0,0,.25);cursor:pointer;';
          b.onclick = onclick;
          b.onmouseenter = function(){ b.style.opacity='0.9'; };
          b.onmouseleave = function(){ b.style.opacity='1'; };
          return b;
        }
        wrap.appendChild(btn('Export HTML', function(){ try { PA.tools && PA.tools.exportHTML && PA.tools.exportHTML(); } catch(e){} }));
        wrap.appendChild(btn('Backup to Local', function(){ try { PA.tools && PA.tools.backupToLocal && PA.tools.backupToLocal(); } catch(e){} }));
        wrap.appendChild(btn('Show Regressions', function(){ 
          try { 
            var arr = JSON.parse(localStorage.getItem('pa_regressions') || '[]'); 
            console.log('[PA][regressions]', arr); 
            alert('Console: printed '+arr.length+' regression records');
          } catch(e){} 
        }));
        document.body.appendChild(wrap);
        return true;
      } catch(e){ return false; }
    }

    function install(){
      try {
        ensureTools();
        // Re-check on flag save if available
        if (!document.__paToolsFlagHooked && window.PA && PA.flags && typeof PA.flags.save === 'function'){
          var origSave = PA.flags.save;
          PA.flags.save = function(){ try { ensureTools(); } catch(e){} return origSave.apply(this, arguments); };
          document.__paToolsFlagHooked = true;
        }
      } catch(e){}
    }

    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(install, 0);
    } else {
      document.addEventListener('DOMContentLoaded', install);
    }
  })();
} catch (e) { /* no-op */ }


/* =======================
 * S9 (ops): State import/export + tools menu entries (flag-gated via toolsButton)
 * - Adds PA.tools.exportState() / importState(jsonOrString)
 * - Adds "Export State" / "Import State" buttons to existing tools menu when visible
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    function download(name, data, type){
      try {
        var a = document.createElement('a');
        a.href = URL.createObjectURL(new Blob([data], {type:type||'application/json'}));
        a.download = name;
        document.body.appendChild(a); a.click();
        setTimeout(function(){ URL.revokeObjectURL(a.href); a.remove(); }, 0);
        return true;
      } catch(e){ return false; }
    }
    function exportState(){
      try {
        var out = {
          ts: Date.now(),
          rules: localStorage.getItem('pa_rules_v6') || null,
          flags: localStorage.getItem('pa_flags_v1') || null,
          regressions: localStorage.getItem('pa_regressions') || '[]',
          note: 'rules/flags are JSON strings; restore with importState()'
        };
        return download('pa-state-'+out.ts+'.json', JSON.stringify(out, null, 2), 'application/json');
      } catch(e){ return false; }
    }
    function importState(obj){
      try {
        var data = obj;
        if (typeof obj === 'string') data = JSON.parse(obj);
        if (!data || typeof data !== 'object') return false;
        if (data.rules) localStorage.setItem('pa_rules_v6', data.rules);
        if (data.flags) localStorage.setItem('pa_flags_v1', data.flags);
        if (data.regressions) localStorage.setItem('pa_regressions', data.regressions);
        // Reload to apply flags/rules
        location.reload();
        return true;
      } catch(e){ alert('Import failed: '+e.message); return false; }
    }
    window.PA.tools = Object.assign({}, window.PA.tools, { exportState: exportState, importState: importState });

    function ensureExtraButtons(){
      try {
        var flags = window.PA && PA.flags ? PA.flags : {};
        if (!flags.toolsButton) return false;
        var wrap = document.getElementById('__pa_tools_btn');
        if (!wrap) return false;
        function add(id, label, onClick){
          if (document.getElementById(id)) return;
          var b = document.createElement('button');
          b.id = id;
          b.textContent = label;
          b.style.cssText = 'background:#0369a1;color:#fff;border:none;border-radius:14px;padding:10px 14px;font-size:12px;font-weight:700;box-shadow:0 6px 16px rgba(0,0,0,.25);cursor:pointer;';
          b.onclick = onClick;
          b.onmouseenter = function(){ b.style.opacity='0.9'; };
          b.onmouseleave = function(){ b.style.opacity='1'; };
          wrap.appendChild(b);
        }
        add('__btn_export_state', 'Export State', function(){ try { PA.tools && PA.tools.exportState && PA.tools.exportState(); } catch(e){} });
        add('__btn_import_state', 'Import State', function(){
          try { 
            var txt = prompt('Paste state JSON exported earlier:');
            if (txt) PA.tools && PA.tools.importState && PA.tools.importState(txt);
          } catch(e){}
        });
        return true;
      } catch(e){ return false; }
    }

    function install(){
      try {
        ensureExtraButtons();
        // Re-run when flags get saved (tools menu may toggle)
        if (!document.__paToolsExtraHooked && window.PA && PA.flags && typeof PA.flags.save === 'function'){
          var orig = PA.flags.save;
          PA.flags.save = function(){
            try { setTimeout(ensureExtraButtons, 0); } catch(e){}
            return orig.apply(this, arguments);
          };
          document.__paToolsExtraHooked = true;
        }
      } catch(e){}
    }

    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(install, 0);
    } else {
      document.addEventListener('DOMContentLoaded', install);
    }
  })();
} catch (e) { /* no-op */ }


/* =======================
 * S10: Adapter enrichment v2 (rowsCount) — flag-gated, no default change
 * - Requires: PA.flags.aggregateModelFromParse === true
 * - New flag: PA.flags.adapterEnrich2 (default false)
 * - Only sets fields that already exist in the seed model
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    window.PA.flags = Object.assign({ adapterEnrich2:false }, window.PA.flags || {});

    function deepClone(o){ try { return JSON.parse(JSON.stringify(o)); } catch(e){ return null; } }
    function findExistingKey(obj, paths){
      for (var i=0;i<paths.length;i++){
        var p = paths[i];
        var cur = obj;
        var ok = true;
        for (var j=0;j<p.length;j++){
          var k = p[j];
          if (j === p.length-1){
            if (!(k in cur)) { ok=false; break; }
          } else {
            if (!cur || typeof cur[k] !== 'object') { ok=false; break; }
            cur = cur[k];
          }
        }
        if (ok) return p;
      }
      return null;
    }
    function setIfPathExists(obj, path, value){
      try {
        if (!path) return false;
        var cur = obj;
        for (var i=0;i<path.length-1;i++){
          var k = path[i];
          if (!cur || typeof cur[k] !== 'object') return false;
          cur = cur[k];
        }
        var last = path[path.length-1];
        if (!(last in cur)) return false;
        cur[last] = value;
        return true;
      } catch(e){ return false; }
    }

    var prev = window.PA && PA.app && PA.app.aggregateToModel ? PA.app.aggregateToModel : null;
    if (!prev) return;

    function aggregateToModelV2(agg, rules, seed){
      // Delegate to previous adapter first (preserves total parity + base seeding)
      var baseRes = prev(agg, rules, seed);
      if (!baseRes || !baseRes.ok || !baseRes.model) return baseRes;
      try {
        var flags = window.PA && PA.flags ? PA.flags : {};
        if (!flags.adapterEnrich2) return baseRes; // off by default
        var model = baseRes.model;
        var items = (agg && Array.isArray(agg.items)) ? agg.items : [];
        var rowsCount = items.length;

        // Potential target keys to set if they already exist in seed
        var countPaths = [
          ['kpis','rowsCount'], ['summary','rowsCount'], ['totals','rowsCount'],
          ['kpis','rowCount'], ['summary','rowCount'], ['totals','rowCount'],
          ['rowsCount'], ['rowCount']
        ];
        var existing = findExistingKey(model, countPaths);
        if (existing) setIfPathExists(model, existing, rowsCount);

        return Object.assign({}, baseRes, { enriched2: { rowsCountSet: !!existing } });
      } catch(e){
        return baseRes; // never fail the adapter
      }
    }

    window.PA.app.aggregateToModel = aggregateToModelV2;
    window.PA.app.__adapterPrevV2 = prev;
  })();
} catch (e) { /* no-op */ }


/* =======================
 * S11: Adapter enrichment v3 (fileCount) — flag-gated, no default change
 * - Requires: aggregateModelFromParse === true
 * - New flag: PA.flags.adapterEnrich3 (default false)
 * - Only sets fields that already exist in the seed model (no new keys)
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    window.PA.flags = Object.assign({ adapterEnrich3:false }, window.PA.flags || {});

    function findExistingKey(obj, paths){
      for (var i=0;i<paths.length;i++){
        var p = paths[i];
        var cur = obj;
        var ok = true;
        for (var j=0;j<p.length;j++){
          var k = p[j];
          if (j === p.length-1){
            if (!(k in cur)) { ok=false; break; }
          } else {
            if (!cur || typeof cur[k] !== 'object') { ok=false; break; }
            cur = cur[k];
          }
        }
        if (ok) return p;
      }
      return null;
    }
    function setIfPathExists(obj, path, value){
      try {
        if (!path) return false;
        var cur = obj;
        for (var i=0;i<path.length-1;i++){
          var k = path[i];
          if (!cur || typeof cur[k] !== 'object') return false;
          cur = cur[k];
        }
        var last = path[path.length-1];
        if (!(last in cur)) return false;
        cur[last] = value;
        return true;
      } catch(e){ return false; }
    }

    var prev = window.PA && PA.app && PA.app.aggregateToModel ? PA.app.aggregateToModel : null;
    if (!prev) return;

    function aggregateToModelV3(agg, rules, seed){
      var baseRes = prev(agg, rules, seed);
      if (!baseRes || !baseRes.ok || !baseRes.model) return baseRes;
      try {
        var flags = window.PA && PA.flags ? PA.flags : {};
        if (!flags.adapterEnrich3) return baseRes; // off by default
        var model = baseRes.model;
        var filesCount = (agg && typeof agg.filesCount === 'number') ? agg.filesCount
                         : (agg && Array.isArray(agg.items) ? agg.items.length : null);

        var fileCountPaths = [
          ['metadata','filesCount'], ['kpis','filesCount'], ['summary','filesCount'], ['totals','filesCount'],
          ['fileCount'], ['filesCount']
        ];
        var existing = findExistingKey(model, fileCountPaths);
        if (existing && filesCount != null) setIfPathExists(model, existing, filesCount);

        return Object.assign({}, baseRes, { enriched3: { filesCountSet: !!existing } });
      } catch(e){
        return baseRes;
      }
    }

    window.PA.app.aggregateToModel = aggregateToModelV3;
    window.PA.app.__adapterPrevV3 = prev;
  })();
} catch (e) { /* no-op */ }


/* =======================
 * S12 bundle: adapter (carriedForward) + UI (bindViaUI micro-listener) + parse (filesCount)
 * All changes are safe and flag-gated where applicable. No default behavior changes.
 * ======================= */
try {
  window.PA = window.PA || {};

  // --- S12 (parse): attach shallow filesCount to aggregate result ---
  (function attachFilesCount(){
    try {
      if (!PA.parser || typeof PA.parser.parseDocuments !== 'function') return;
      if (PA.parser.parseDocuments.__paFilesCount) return;
      const __orig = PA.parser.parseDocuments;
      PA.parser.parseDocuments = async function(files){
        const res = await __orig.apply(this, arguments);
        try {
          var n = null;
          if (files && typeof files.length === 'number') n = files.length;
          else if (files && files.files && typeof files.files.length === 'number') n = files.files.length;
          if (res && typeof res === 'object' && res.filesCount == null && n != null) res.filesCount = n;
        } catch(e){}
        return res;
      };
      PA.parser.parseDocuments.__paFilesCount = true;
      PA.parser.parseDocuments.__origFilesCount = __orig;
    } catch(e){ /* noop */ }
  })();

  // --- S12 (adapter): surface carriedForward if seed has it and agg exposes it ---
  (function adapterCarriedForward(){
    try {
      if (!PA.app || typeof PA.app.aggregateToModel !== 'function') return;
      const prev = PA.app.aggregateToModel;
      if (prev.__paCFWrapped) return;

      function findExistingKey(obj, paths){
        for (var i=0;i<paths.length;i++){
          var p = paths[i];
          var cur = obj, ok = true;
          for (var j=0;j<p.length;j++){
            var k = p[j];
            if (j === p.length-1){
              if (!(k in cur)) { ok=false; break; }
            } else {
              if (!cur || typeof cur[k] !== 'object') { ok=false; break; }
              cur = cur[k];
            }
          }
          if (ok) return p;
        }
        return null;
      }
      function setIfPathExists(obj, path, value){
        try {
          if (!path) return false;
          var cur = obj;
          for (var i=0;i<path.length-1;i++){
            var k = path[i];
            if (!cur || typeof cur[k] !== 'object') return false;
            cur = cur[k];
          }
          var last = path[path.length-1];
          if (!(last in cur)) return false;
          cur[last] = value;
          return true;
        } catch(e){ return false; }
      }

      function wrapped(agg, rules, seed){
        var out = prev(agg, rules, seed);
        try {
          if (!out || !out.ok || !out.model) return out;
          var flags = window.PA && PA.flags ? PA.flags : {};
          // Flag default: off
          window.PA.flags = Object.assign({ adapterEnrichCF:false }, window.PA.flags || {});
          if (!flags.adapterEnrichCF) return out;

          var cf = (agg && typeof agg.carriedForward === 'number') ? agg.carriedForward : null;
          if (cf == null) return out;

          var model = out.model;
          var targets = [
            ['totals','carriedForward'],
            ['summary','carriedForward'],
            ['carriedForward']
          ];
          var p = findExistingKey(model, targets);
          if (p) setIfPathExists(model, p, cf);
          return out;
        } catch(e){
          return out;
        }
      }
      wrapped.__paCFWrapped = true;
      PA.app.aggregateToModel = wrapped;
    } catch(e){ /* noop */ }
  })();

  // --- S12 (UI): route one small listener via PA.ui.bindUI behind bindViaUI ---
  (function uiMicroBind(){
    try {
      window.PA.flags = Object.assign({ bindViaUI:false }, window.PA.flags || {});
      function install(){
        try {
          if (!(window.PA && PA.flags && PA.flags.bindViaUI)) return;
          if (document.__paUIMicroBound) return;
          document.__paUIMicroBound = true;
          document.addEventListener('click', function(ev){
            try {
              var t = ev.target;
              if (!t) return;
              var isSettings = (t.id === 'openSettingsBtn') || (t.classList && t.classList.contains('settings-btn')) || (t.dataset && t.dataset.action === 'open-settings');
              if (isSettings) {
                // Avoid double-open
                var opened = document.querySelector('.modal-overlay.show');
                if (!opened && typeof window.openSettingsModal === 'function') {
                  window.openSettingsModal();
                }
              }
            } catch(e){}
          }, true);
        } catch(e){}
      }
      if (document.readyState === 'complete' || document.readyState === 'interactive') {
        setTimeout(install, 0);
      } else {
        document.addEventListener('DOMContentLoaded', install, { once:true });
      }
    } catch(e){ /* noop */ }
  })();

} catch (e) { /* no-op */ }


/* =======================
 * S13: Diagnostics (flag-gated)
 * - Flag: PA.flags.diagnostics (default false)
 * - Badge shows active mode after Analyze: legacy | shadow-only | adapter | fallback
 * - Console summary on Analyze
 * - Helpers: PA.tests.enableShadowTest(), enableAdapterTest(), resetFlagsSession()
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    window.PA.flags = Object.assign({ diagnostics:false }, window.PA.flags || {});

    function ensureBadge(){
      if (!PA.flags || !PA.flags.diagnostics) {
        var ex = document.getElementById('__pa_mode_badge');
        if (ex) ex.remove();
        return null;
      }
      var id='__pa_mode_badge', el=document.getElementById(id);
      if (el) return el;
      el = document.createElement('div');
      el.id = id;
      el.style.cssText = 'position:fixed;top:16px;right:16px;background:#0f172a;color:#fff;'
        +'padding:8px 12px;border-radius:12px;font:700 11px/1.2 Inter,system-ui,sans-serif;'
        +'box-shadow:0 8px 24px rgba(0,0,0,.25);z-index:9999;opacity:.92;';
      el.textContent = 'mode: legacy';
      document.body.appendChild(el);
      return el;
    }

    function label(mode){
      var el = ensureBadge();
      if (!el) return;
      el.textContent = 'mode: '+mode;
      el.style.background = (mode==='adapter') ? '#065f46'
                          : (mode==='shadow-only') ? '#334155'
                          : (mode==='fallback') ? '#b91c1c'
                          : '#0f172a';
    }

    function computeMode(){
      try {
        var f = PA.flags || {};
        if (!f.useAggregate) return 'legacy';
        var agg = PA.app && PA.app.__lastAggregate && PA.app.__lastAggregate.res;
        var cap = PA.app && PA.app.__lastCapturedModel;
        if (f.useAggregate && !f.aggregateDrivesUI) return 'shadow-only';
        if (f.useAggregate && f.aggregateDrivesUI && !f.aggregateModelFromParse) return 'legacy'; // UI still legacy
        if (!(agg && typeof agg.total==='number' && cap)) return 'fallback';
        // total parity
        var getTotal = function(m){
          var t = (m && m.totals) ? m.totals : (m && m.summary ? m.summary : m);
          var keys = ['invoiceTotal','grandTotal','totalDue','total','sum'];
          for (var i=0;i<keys.length;i++) if (t && typeof t[keys[i]]==='number') return t[keys[i]];
          return null;
        };
        var tCap = getTotal(cap);
        var tAgg = agg.total;
        if (tCap==null || tAgg==null) return 'fallback';
        var diff = Math.abs(+tCap - +tAgg);
        return (diff<=0.01) ? 'adapter' : 'fallback';
      } catch(e){ return 'legacy'; }
    }

    function onAnalyzePost(){
      try {
        if (!(PA.flags && PA.flags.diagnostics)) return;
        var mode = computeMode();
        label(mode);
        console.info('[PA][diag] mode=%s flags=%o', mode, PA.flags);
      } catch(e){}
    }

    function install(){
      try {
        ensureBadge();
        var btn = document.getElementById('analyzeBtn');
        if (btn && !btn.__paDiagHook){
          btn.addEventListener('click', function(){ setTimeout(onAnalyzePost, 200); }, true);
          btn.__paDiagHook = true;
        }
      } catch(e){}
    }

    // test helpers (session only; no save)
    function enableShadowTest(){
      try {
        PA.flags.useAggregate = true;
        PA.flags.aggregateDrivesUI = false;
        PA.flags.aggregateModelFromParse = false;
        PA.flags.shadowCompare = true;
        PA.flags.diagnostics = true;
        label('shadow-only');
      } catch(e){}
    }
    function enableAdapterTest(){
      try {
        PA.flags.useAggregate = true;
        PA.flags.aggregateDrivesUI = true;
        PA.flags.aggregateModelFromParse = true;
        PA.flags.diagnostics = true;
        label('adapter');
      } catch(e){}
    }
    function resetFlagsSession(){
      try {
        // don't touch persisted flags
        PA.flags.useAggregate = false;
        PA.flags.aggregateDrivesUI = false;
        PA.flags.aggregateModelFromParse = false;
        PA.flags.adapterEnrich2 = false;
        PA.flags.adapterEnrich3 = false;
        PA.flags.adapterEnrichCF = false;
        PA.flags.bindViaUI = false;
        PA.flags.toolsButton = false;
        PA.flags.diagnostics = false;
        var b = document.getElementById('__pa_mode_badge'); if (b) b.remove();
      } catch(e){}
    }

    window.PA.tests = Object.assign({}, window.PA.tests, {
      enableShadowTest, enableAdapterTest, resetFlagsSession
    });

    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(install, 0);
    } else {
      document.addEventListener('DOMContentLoaded', install);
    }
  })();
} catch (e) { /* no-op */ }


/* =======================
 * S14: Diagnostics panel (no-console environments)
 * - Long-press Analyze (1.2s) to open
 * - Toggle flags session-only or persist via Save
 * - No default UI changes; panel is hidden unless invoked
 * ======================= */
try {
  window.PA = window.PA || {};
  (function(){
    var HOLD_MS = 1200;
    function buildPanel(){
      var ex = document.getElementById('__pa_diag_panel');
      if (ex) return ex;
      var wrap = document.createElement('div');
      wrap.id = '__pa_diag_panel';
      wrap.style.cssText = 'position:fixed;inset:0;background:rgba(0,0,0,.45);z-index:9999;display:none;align-items:center;justify-content:center;';
      var card = document.createElement('div');
      card.style.cssText = 'background:#fff;border-radius:14px;min-width:280px;max-width:92vw;width:420px;box-shadow:0 20px 50px rgba(0,0,0,.35);overflow:hidden;font:500 13px/1.4 Inter,system-ui,sans-serif;';
      var head = document.createElement('div');
      head.style.cssText = 'background:#0f172a;color:#fff;padding:10px 14px;font-weight:800;display:flex;align-items:center;justify-content:space-between;';
      head.innerHTML = '<span>Diagnostics</span>';
      var close = document.createElement('button');
      close.textContent = '×';
      close.style.cssText = 'background:rgba(255,255,255,.15);color:#fff;border:none;width:28px;height:28px;border-radius:8px;font-weight:900;cursor:pointer;';
      close.onclick = function(){ wrap.style.display='none'; };
      head.appendChild(close);
      var body = document.createElement('div');
      body.style.cssText = 'padding:12px 14px;display:grid;gap:10px;';
      function row(label, key){
        var id='__pa_flag_'+key;
        var d = document.createElement('label');
        d.style.cssText = 'display:flex;align-items:center;justify-content:space-between;gap:8px;padding:8px 10px;border:1px solid #e2e8f0;border-radius:10px;';
        d.innerHTML = '<span style="font-weight:700">'+label+'</span>';
        var cb = document.createElement('input');
        cb.type = 'checkbox'; cb.id = id; cb.dataset.key = key;
        d.appendChild(cb);
        return d;
      }
      var flags = [
        ['useAggregate','useAggregate'],
        ['aggregateDrivesUI','aggregateDrivesUI'],
        ['aggregateModelFromParse','aggregateModelFromParse'],
        ['shadowCompare','shadowCompare'],
        ['adapterEnrich2','adapterEnrich2'],
        ['adapterEnrich3','adapterEnrich3'],
        ['adapterEnrichCF','adapterEnrichCF'],
        ['bindViaUI','bindViaUI'],
        ['toolsButton','toolsButton'],
        ['diagnostics','diagnostics']
      ];
      flags.forEach(function(x){ body.appendChild(row(x[0], x[1])); });
      var foot = document.createElement('div');
      foot.style.cssText = 'display:flex;gap:10px;justify-content:flex-end;padding:10px 14px;background:#f8fafc;border-top:1px solid #e2e8f0;';
      function btn(txt, cls, onclick){
        var b = document.createElement('button');
        b.textContent = txt;
        b.className = cls || '';
        b.style.cssText = 'background:#0f172a;color:#fff;border:none;border-radius:10px;padding:8px 12px;font-weight:800;cursor:pointer;';
        b.onclick = onclick;
        return b;
      }
      var apply = btn('Apply (session)', '', function(){
        try {
          var inputs = body.querySelectorAll('input[type=checkbox][data-key]');
          inputs.forEach(function(i){ var k=i.dataset.key; PA.flags[k]=!!i.checked; });
          // Ensure badge shows when diagnostics on
          if (PA.flags.diagnostics && typeof document.createEvent === 'function'){
            var ev = document.createEvent('Event'); ev.initEvent('click', true, true);
            var ab = document.getElementById('analyzeBtn'); if (ab) ab.dispatchEvent(ev);
          }
        } catch(e){}
      });
      var save = btn('Save', '', function(){
        try { if (PA.flags && typeof PA.flags.save==='function') PA.flags.save(); } catch(e){}
      });
      var reset = btn('Reset Session', '', function(){
        try { PA.tests && PA.tests.resetFlagsSession && PA.tests.resetFlagsSession(); sync(); } catch(e){}
      });
      var closeBtn = btn('Close', '', function(){ wrap.style.display='none'; });
      foot.appendChild(apply); foot.appendChild(save); foot.appendChild(reset); foot.appendChild(closeBtn);

      card.appendChild(head); card.appendChild(body); card.appendChild(foot);
      wrap.appendChild(card);
      document.body.appendChild(wrap);

      function sync(){
        try {
          var f = PA.flags || {};
          var inputs = body.querySelectorAll('input[type=checkbox][data-key]');
          inputs.forEach(function(i){ var k=i.dataset.key; i.checked = !!f[k]; });
        } catch(e){}
      }
      wrap.__sync = sync;
      return wrap;
    }

    function openPanel(){
      var p = buildPanel();
      try { p.__sync && p.__sync(); } catch(e){}
      p.style.display='flex';
    }

    function install(){
      try {
        var btn = document.getElementById('analyzeBtn');
        if (!btn || btn.__paDiagPanelInstalled) return;
        var timer = null;
        btn.addEventListener('touchstart', startHold, {passive:true});
        btn.addEventListener('mousedown', startHold);
        ['touchend','touchcancel','mouseup','mouseleave'].forEach(function(evt){
          btn.addEventListener(evt, cancelHold, {passive:true});
        });
        function startHold(){
          cancelHold();
          timer = setTimeout(openPanel, 1200);
        }
        function cancelHold(){
          if (timer){ clearTimeout(timer); timer = null; }
        }
        btn.__paDiagPanelInstalled = true;
      } catch(e){}
    }

    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(install, 0);
    } else {
      document.addEventListener('DOMContentLoaded', install, { once:true });
    }
  })();
} catch (e) { /* no-op */ }
</script>

<script id="__pa_poly_arraybuffer">
try{
  if (typeof Blob !== 'undefined' && !Blob.prototype.arrayBuffer){
    Blob.prototype.arrayBuffer = function(){
      var b = this;
      return new Promise(function(resolve, reject){
        try{
          var r = new FileReader();
          r.onload = function(){ resolve(r.result); };
          r.onerror = function(){ reject(r.error || new Error('readAsArrayBuffer failed')); };
          r.readAsArrayBuffer(b);
        }catch(e){ reject(e); }
      });
    };
  }
}catch(e){}
</script>


<script id="__pa_hook_capture">
(function(){
  try{
    window.PA = window.PA || {}; PA.app = PA.app || {}; PA.ui = PA.ui || {};
    if (window.__paRenderHooked) return;
    function deepClone(x){ try{ return JSON.parse(JSON.stringify(x)); }catch(e){ return x; } }
    function wrap(orig){
      return function(){
        try{ PA.app.__lastCapturedModel = deepClone(arguments[0]); }catch(e){}
        return orig.apply(this, arguments);
      };
    }
    var hooked = false;
    if (typeof window.renderReport === 'function'){ window.renderReport = wrap(window.renderReport); hooked = true; }
    if (!hooked && PA.ui && typeof PA.ui.renderReport === 'function'){ PA.ui.renderReport = wrap(PA.ui.renderReport); hooked = true; }
    window.__paRenderHooked = hooked;
  }catch(e){}
})();
</script>


<script id="__pa_shadow_runner">
(function(){
  try{
    window.PA = window.PA || {}; PA.app = PA.app || {}; PA.flags = Object.assign({useAggregate:false, aggregateDrivesUI:false, aggregateModelFromParse:false}, PA.flags || {});
    if (window.__paShadowInstalled) return;

    function pickTotal(m){
      try{
        var t = (m && m.totals) ? m.totals : (m && m.summary ? m.summary : m);
        var keys = ['invoiceTotal','grandTotal','totalDue','total','sum'];
        for (var i=0;i<keys.length;i++){
          if (t && typeof t[keys[i]] === 'number') return +t[keys[i]];
        }
        return null;
      }catch(e){ return null; }
    }
    async function shadowRun(){
      try{
        var f = PA.flags || {};
        if (!f.useAggregate || f.aggregateDrivesUI) return;
        if (!PA.parser || typeof PA.parser.parseDocuments !== 'function') return;
        var fi = document.getElementById('fileInput');
        var files = fi && fi.files;
        if (!files || !files.length) return;
        var rules = (PA.rules && typeof PA.rules.current==='function') ? PA.rules.current() : {};
        var res = await PA.parser.parseDocuments(files, rules);
        var adapted = null;
        if (PA.app && typeof PA.app.aggregateToModel === 'function'){
          try{
            var a = PA.app.aggregateToModel(res, rules, {});
            adapted = a && a.model ? a.model : null;
            var tot = pickTotal(adapted);
            if (typeof res.total !== 'number' && tot != null){ res.total = +tot; }
          }catch(e){}
        }
        PA.app.__lastAggregate = { at: Date.now(), res: res };
        PA.app.__lastAggregateModel = adapted;
      }catch(e){
        PA.app.__lastAggregateError = (e && e.message) ? e.message : String(e);
      }
    }
    (function install(){
      try{
        if (window.__paShadowInstalled) return;
        function wrap(orig){
          return function(){
            try{
              var ret = orig.apply(this, arguments);
              setTimeout(shadowRun, 0);
              return ret;
            }catch(e){ return orig.apply(this, arguments); }
          };
        }
        var hooked = false;
        if (typeof window.renderReport === 'function' && !window.renderReport.__paShadowWrapped){
          window.renderReport = wrap(window.renderReport);
          window.renderReport.__paShadowWrapped = true;
          hooked = true;
        }
        if (!hooked && window.PA && PA.ui && typeof PA.ui.renderReport === 'function' && !PA.ui.renderReport.__paShadowWrapped){
          PA.ui.renderReport = wrap(PA.ui.renderReport);
          PA.ui.renderReport.__paShadowWrapped = true;
          hooked = true;
        }
        window.__paShadowInstalled = hooked;
      }catch(e){}
    })();
  }catch(e){}
})();
</script>


<script id="__pa_guard_validation_warning">
(function(){
  try{
    var orig = window.showValidationAlert;
    if (typeof orig !== 'function') return;
    if (orig.__paGuarded) return;

    function nearlyEqual(a,b){ try{ return Math.abs((+a)-(+b)) <= 0.01; }catch(e){ return false; } }

    window.showValidationAlert = function(message, type){
      try{
        var f = (window.PA && PA.flags) ? PA.flags : {};
        var shadowOnly = !!(f.useAggregate && !f.aggregateDrivesUI);
        var isWarn = (type === 'warning') && /could not validate invoice total/i.test(String(message||''));

        if (shadowOnly && isWarn){
          // If legacy UI computed expected & extracted totals and they match, suppress the warning (shadow race false-positive)
          var uiTotal = null, expected = null;
          try{
            if (window.PA && PA.app && PA.app.__lastCapturedModel){
              var m = PA.app.__lastCapturedModel;
              var t = (m.totals && (m.totals.invoiceTotal||m.totals.total))
                      || (m.summary && (m.summary.invoiceTotal||m.summary.total))
                      || null;
              expected = t != null ? +t : expected;
            }
          }catch(e){}
          try{
            // try read numeric from UI header if present, else leave null
            var el = document.querySelector('.kpi-value[data-total]');
            if (el && /([0-9.,]+)/.test(el.textContent||'')){
              uiTotal = parseFloat(RegExp.$1.replace(/,/g,''));
            }
          }catch(e){}
          if (uiTotal!=null && expected!=null && nearlyEqual(uiTotal, expected)){
            console.info('[PA] suppressed legacy warning during shadow mode (totals matched).');
            return; // suppress
          }
        }
      }catch(e){}
      return orig.apply(this, arguments);
    };
    window.showValidationAlert.__paGuarded = true;
  }catch(e){}
})();
</script>

</body>
</html>